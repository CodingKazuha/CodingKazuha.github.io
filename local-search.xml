<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/12306/"/>
    <url>/2023/11/17/12306/</url>
    
    <content type="html"><![CDATA[<h3 id="12306项目部署"><a href="#12306项目部署" class="headerlink" title="12306项目部署"></a>12306项目部署</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">git clone https:<span class="hljs-comment">//gitee.com/nageoffer/12306.git</span><br></code></pre></td></tr></table></figure><p>出报错：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java">fatal: unable to access ‘xxx/‘: Failed to connect to <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> port <span class="hljs-number">7890</span>: Connection refused<br></code></pre></td></tr></table></figure><p>代理错误，使用指令<code>git config --global -l</code>查看当前设置，然后取消代理</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">git config --global --unset http.proxy<br>git config --global --unset https.proxy<br></code></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java">-Dspring.data.redis.password=Sm9sVXBOYJjI030b5tz0trjpzvZzRhtZmEbv0uOImcD1wEDOPfeaqNU4PxHob/Wp <br>-Dspring.data.redis.port=<span class="hljs-number">19389</span> <br>-Dunique-name=kazuha-name<br>-Dframework.cache.redis.prefix=kazuha-redis-pre<br>-Dspring.data.redis.host=common-redis-dev.magestack.cn<br>-Drocketmq.name-server=common-rocketmq-dev.magestack.cn:<span class="hljs-number">9876</span><br>-Dspring.cloud.nacos.discovery.server-addr=common-nacos-dev.magestack.cn:<span class="hljs-number">8848</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/Summary/"/>
    <url>/2023/11/17/Summary/</url>
    
    <content type="html"><![CDATA[<h3 id="数组转list"><a href="#数组转list" class="headerlink" title="数组转list"></a>数组转list</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//int数组</span><br>List&lt;Integer&gt; list = Arrays.stream(nums).boxed().collect(Collectors.toList());<br><span class="hljs-comment">//Integer数组</span><br>List&lt;Integer&gt; integersList = Arrays.asList(integersArray);<br><span class="hljs-comment">//String数组</span><br>List&lt;String&gt; stringList = Arrays.stream(str).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><h3 id="List转数组"><a href="#List转数组" class="headerlink" title="List转数组"></a>List转数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java">Integer[] integersArrau = integersList.toArray(<span class="hljs-keyword">new</span> <span class="hljs-title class_">Integer</span>[integersList.size()]);<br><br>Integer[] integersArray2 = integersList.stream().toArray(Integer[]::<span class="hljs-keyword">new</span>);<br><br><span class="hljs-type">int</span>[] res = list.stream().mapToInt(Integer::intValue).toArray();<br></code></pre></td></tr></table></figure><h3 id="得到数组的最小值"><a href="#得到数组的最小值" class="headerlink" title="得到数组的最小值"></a>得到数组的最小值</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">int</span> <span class="hljs-variable">min</span> <span class="hljs-operator">=</span> Arrays.stream(nums).min().getAsInt();<br></code></pre></td></tr></table></figure><h3 id="旋转数组"><a href="#旋转数组" class="headerlink" title="旋转数组"></a>旋转数组</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs java">在字符串：剑指Offer58-II.左旋转字符串中，我们提到，如下步骤就可以坐旋转字符串：<br><span class="hljs-number">1.</span> 反转区间为前n的子串<br><span class="hljs-number">2.</span> 反转区间为n到末尾的子串<br><span class="hljs-number">3.</span> 反转整个字符串<br>本题是右旋转，其实就是反转的顺序改动一下，优先反转整个字符串，步骤如下：<br><span class="hljs-number">1.</span> 反转整个字符串<br><span class="hljs-number">2.</span> 反转区间为前k的子串<br><span class="hljs-number">3.</span> 反转区间为k到末尾的子串<br></code></pre></td></tr></table></figure><h3 id="由数组构建HashMap"><a href="#由数组构建HashMap" class="headerlink" title="由数组构建HashMap"></a>由数组构建HashMap</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">HashMap&lt;Integer, Integer&gt; hashMap = <span class="hljs-keyword">new</span> <span class="hljs-title class_">HashMap</span>&lt;&gt;();<br><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> num : nums) hashMap.put(num, hashMap.getOrDefault(num, <span class="hljs-number">0</span> ) + <span class="hljs-number">1</span>);<br></code></pre></td></tr></table></figure><h3 id="Code645桶排序"><a href="#Code645桶排序" class="headerlink" title="Code645桶排序"></a>Code645桶排序</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br><span class="hljs-keyword">while</span> (nums[i] != i + <span class="hljs-number">1</span> &amp;&amp; nums[nums[i] - <span class="hljs-number">1</span>] != nums[i]) &#123;<br>swap(nums, i, nums[i] - <span class="hljs-number">1</span>);<br>&#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="idea快捷键"><a href="#idea快捷键" class="headerlink" title="idea快捷键"></a>idea快捷键</h3><table><thead><tr><th align="center">快捷键</th><th align="center">功能</th></tr></thead><tbody><tr><td align="center">ctrl + f12</td><td align="center">查询类所有方法</td></tr><tr><td align="center">alt+enter</td><td align="center">智能辅助</td></tr><tr><td align="center">ctrl+p</td><td align="center">方法参数提示</td></tr><tr><td align="center">alt+insert</td><td align="center">新建, 插入</td></tr><tr><td align="center">ctrl+alt+i</td><td align="center">自动对齐, 整理缩进</td></tr><tr><td align="center">ctrl+alt+l</td><td align="center">格式化代码</td></tr><tr><td align="center">ctrl+h</td><td align="center">查看集成结构</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/Daily/"/>
    <url>/2023/11/17/Daily/</url>
    
    <content type="html"><![CDATA[<h4 id="Leetcode049-字母异位词分组"><a href="#Leetcode049-字母异位词分组" class="headerlink" title="Leetcode049 字母异位词分组"></a>Leetcode049 字母异位词分组</h4><p>利用 stream 的 <code>groupingBy</code> 算子</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs java">    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 给你一个字符串数组，请你将 字母异位词 组合在一起。可以按任意顺序返回结果列表。</span><br><span class="hljs-comment">     * 字母异位词 是由重新排列源单词的所有字母得到的一个新单词。</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 示例 1:</span><br><span class="hljs-comment">     * 输入: strs = [&quot;eat&quot;, &quot;tea&quot;, &quot;tan&quot;, &quot;ate&quot;, &quot;nat&quot;, &quot;bat&quot;]</span><br><span class="hljs-comment">     * 输出: [[&quot;bat&quot;],[&quot;nat&quot;,&quot;tan&quot;],[&quot;ate&quot;,&quot;eat&quot;,&quot;tea&quot;]]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 示例 2:</span><br><span class="hljs-comment">     * 输入: strs = [&quot;&quot;]</span><br><span class="hljs-comment">     * 输出: [[&quot;&quot;]]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     * 示例 3:</span><br><span class="hljs-comment">     * 输入: strs = [&quot;a&quot;]</span><br><span class="hljs-comment">     * 输出: [[&quot;a&quot;]]</span><br><span class="hljs-comment">     * </span><br><span class="hljs-comment">     */</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> List&lt;List&lt;String&gt;&gt; <span class="hljs-title function_">groupAnagrams</span><span class="hljs-params">(String[] strs)</span> &#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ArrayList</span>&lt;&gt;(Arrays.stream(strs)<br>            .collect(Collectors.groupingBy(str -&gt; &#123;<br>                <span class="hljs-comment">// 返回 str 排序后的结果。</span><br>                <span class="hljs-comment">// 按排序后的结果来grouping by，算子类似于 sql 里的 group by。</span><br>                <span class="hljs-type">char</span>[] array = str.toCharArray();<br>                Arrays.sort(array);<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">String</span>(array);<br>            &#125;)).values());<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><code>groupingby</code>示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//按照长度分组</span><br>List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;aa&quot;</span>, <span class="hljs-string">&quot;bbb&quot;</span>, <span class="hljs-string">&quot;ccc&quot;</span>, <span class="hljs-string">&quot;dddd&quot;</span>);<br>Map&lt;Integer, List&lt;String&gt;&gt; result = strings.stream().collect(groupingBy(String::length));<br><br>System.out.println(result);<span class="hljs-comment">//&#123;2=[aa], 3=[bbb, ccc], 4=[dddd]&#125;</span><br>System.out.println(result.values());<span class="hljs-comment">//[[aa], [bbb, ccc], [dddd]] value()生成的是一个collector</span><br></code></pre></td></tr></table></figure><h3 id="LeetCode152-乘积最大的数组"><a href="#LeetCode152-乘积最大的数组" class="headerlink" title="LeetCode152 乘积最大的数组"></a>LeetCode152 乘积最大的数组</h3><p>给你一个整数数组 <code>nums</code> ，请你找出数组中乘积最大的非空连续子数组（该子数组中至少包含一个数字），并返回该子数组所对应的乘积。</p><p>测试用例的答案是一个 <strong>32-位</strong> 整数。</p><p><strong>子数组</strong> 是数组的连续子序列。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs makefile"><span class="hljs-section">输入: nums = [2,3,-2,4]</span><br><span class="hljs-section">输出: 6</span><br><span class="hljs-section">解释: 子数组 [2,3] 有最大乘积 6。</span><br></code></pre></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight subunit"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs subunit">输入: nums = [<span class="hljs-string">-2</span>,0,<span class="hljs-string">-1</span>]<br>输出: 0<br>解释: 结果不能为 2, 因为 [<span class="hljs-string">-2</span>,<span class="hljs-string">-1</span>] 不是子数组。<br></code></pre></td></tr></table></figure><h3 id="LeetCode334-递增的三元子序列"><a href="#LeetCode334-递增的三元子序列" class="headerlink" title="LeetCode334 递增的三元子序列"></a>LeetCode334 递增的三元子序列</h3><p>给你一个整数数组 <code>nums</code> ，判断这个数组中是否存在长度为 <code>3</code> 的递增子序列。</p><p>如果存在这样的三元组下标 <code>(i, j, k)</code> 且满足 <code>i &lt; j &lt; k</code> ，使得 <code>nums[i] &lt; nums[j] &lt; nums[k]</code> ，返回 <code>true</code> ；否则，返回 <code>false</code> 。</p><p> <strong>示例 1：</strong></p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stylus">输入：nums = <span class="hljs-selector-attr">[1,2,3,4,5]</span><br>输出：true<br>解释：任何 <span class="hljs-selector-tag">i</span> &lt; j &lt; k 的三元组都满足题意<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight nix"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs nix">输入：<span class="hljs-attr">nums</span> = [<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>输出：<span class="hljs-literal">false</span><br>解释：不存在满足题意的三元组<br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[2,1,5,0,4,6]</span><br>输出：true<br>解释：三元组 (3, 4, 5) 满足题意，因为 nums<span class="hljs-comment">[3]</span> == 0 &lt; nums<span class="hljs-comment">[4]</span> == 4 &lt; nums<span class="hljs-comment">[5]</span> == 6<br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>1 &lt;= nums.length &lt;= 5 * 105</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li></ul><ol><li>转化为<em><strong>求 nums 的最长上升子序列</strong></em></li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//LeetCode300最长递增子序列</span><br><span class="hljs-comment">//解法一：动态规划</span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-keyword">if</span>(nums.length == <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-type">int</span>[] dp = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    Arrays.fill(dp, <span class="hljs-number">1</span>);<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; i; j++) &#123;<br>            <span class="hljs-keyword">if</span>(nums[j] &lt; nums[i]) dp[i] = Math.max(dp[i], dp[j] + <span class="hljs-number">1</span>);<br>        &#125;<br>        res = Math.max(res, dp[i]);<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br><span class="hljs-comment">//解法二：动态规划 + 二分查找</span><br><span class="hljs-comment">// Dynamic programming + Dichotomy.</span><br><span class="hljs-comment">//TODO </span><br><span class="hljs-keyword">public</span> <span class="hljs-type">int</span> <span class="hljs-title function_">lengthOfLIS</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>    <span class="hljs-type">int</span>[] tails = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[nums.length];<br>    <span class="hljs-type">int</span> <span class="hljs-variable">res</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> num : nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>, j = res;<br>        <span class="hljs-keyword">while</span>(i &lt; j) &#123;<br>            <span class="hljs-type">int</span> <span class="hljs-variable">m</span> <span class="hljs-operator">=</span> (i + j) / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">if</span>(tails[m] &lt; num) i = m + <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">else</span> j = m;<br>        &#125;<br>        tails[i] = num;<br>        <span class="hljs-keyword">if</span>(res == j) res++;<br>    &#125;<br>    <span class="hljs-keyword">return</span> res;<br>&#125;<br></code></pre></td></tr></table></figure><ol start="2"><li>直接求</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">boolean</span> <span class="hljs-title function_">increasingTriplet</span><span class="hljs-params">(<span class="hljs-type">int</span>[] nums)</span> &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">one</span> <span class="hljs-operator">=</span> Integer.MAX_VALUE,two = Integer.MAX_VALUE;<br>        <span class="hljs-keyword">for</span>(<span class="hljs-type">int</span> three : nums)&#123;<br>            <span class="hljs-keyword">if</span>(three &gt; two) <span class="hljs-keyword">return</span> <span class="hljs-literal">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(three &lt;= one) one = three;<br>            <span class="hljs-keyword">else</span> two = three;<br>            <span class="hljs-comment">// if(three &gt; one &amp;&amp; three &lt; two) two = three;</span><br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>    &#125;<br>&#125;<br><br>作者：Xzz<br>链接：https:<span class="hljs-comment">//leetcode.cn/problems/increasing-triplet-subsequence/</span><br>来源：力扣（LeetCode）<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。<br></code></pre></td></tr></table></figure><h3 id="LeetCode260-只出现一次的数字III"><a href="#LeetCode260-只出现一次的数字III" class="headerlink" title="LeetCode260 只出现一次的数字III"></a>LeetCode260 只出现一次的数字III</h3><p>给你一个整数数组 <code>nums</code>，其中恰好有两个元素只出现一次，其余所有元素均出现两次。 找出只出现一次的那两个元素。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>你必须设计并实现线性时间复杂度的算法且仅使用常量额外空间来解决此问题。</p><p><strong>示例 1：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[1,2,1,3,2,5]</span><br>输出：<span class="hljs-comment">[3,5]</span><br>解释：<span class="hljs-comment">[5, 3]</span> 也是有效的答案。<br></code></pre></td></tr></table></figure><p><strong>示例 2：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[-1,0]</span><br>输出：<span class="hljs-comment">[-1,0]</span><br></code></pre></td></tr></table></figure><p><strong>示例 3：</strong></p><figure class="highlight inform7"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs inform7">输入：nums = <span class="hljs-comment">[0,1]</span><br>输出：<span class="hljs-comment">[1,0]</span><br></code></pre></td></tr></table></figure><p><strong>提示：</strong></p><ul><li><code>2 &lt;= nums.length &lt;= 3 * 104</code></li><li><code>-231 &lt;= nums[i] &lt;= 231 - 1</code></li><li>除两个只出现一次的整数外，<code>nums</code> 中的其他数字都出现两次</li></ul><ol><li>哈希表 注意getOrDefault的使用</li><li>异或</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Solution</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-type">int</span>[] singleNumber(<span class="hljs-type">int</span>[] nums) &#123;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">sum</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) sum ^= i;<br>        <span class="hljs-type">int</span> <span class="hljs-variable">k</span> <span class="hljs-operator">=</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-comment">//找到最小的1</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">31</span>; i &gt;= <span class="hljs-number">0</span> &amp;&amp; k == -<span class="hljs-number">1</span>; i--) &#123;<br>            <span class="hljs-keyword">if</span> (((sum &gt;&gt; i) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) k = i;<br>        &#125;<br>        <span class="hljs-type">int</span>[] ans = <span class="hljs-keyword">new</span> <span class="hljs-title class_">int</span>[<span class="hljs-number">2</span>];<br>        <span class="hljs-comment">//通过最小的一位将nums分为两类，在两个类中分别求异或</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> i : nums) &#123;<br>            <span class="hljs-keyword">if</span> (((i &gt;&gt; k) &amp; <span class="hljs-number">1</span>) == <span class="hljs-number">1</span>) ans[<span class="hljs-number">1</span>] ^= i;<br>            <span class="hljs-keyword">else</span> ans[<span class="hljs-number">0</span>] ^= i;<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LeetCode114-二叉树展开为链表"><a href="#LeetCode114-二叉树展开为链表" class="headerlink" title="LeetCode114 二叉树展开为链表"></a>LeetCode114 二叉树展开为链表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//先序遍历迭代法一</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderStack</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>) &#123; <br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Stack&lt;TreeNode&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;TreeNode&gt;();<br>    <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span> || !s.isEmpty()) &#123;<br>        <span class="hljs-keyword">while</span> (root != <span class="hljs-literal">null</span>) &#123;<br>            System.out.println(root.val);<br>            s.push(root);<br>            root = root.left;<br>        &#125;<br>        root = s.pop();<br>        root = root.right;<br>    &#125;<br>&#125;<br><span class="hljs-comment">//先序遍历迭代法二</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">preOrderStack</span><span class="hljs-params">(TreeNode root)</span> &#123;<br>    <span class="hljs-keyword">if</span> (root == <span class="hljs-literal">null</span>)&#123;<br>        <span class="hljs-keyword">return</span>;<br>    &#125;<br>    Stack&lt;TreeNode&gt; s = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Stack</span>&lt;TreeNode&gt;();<br>    s.push(root);<br>    <span class="hljs-keyword">while</span> (!s.isEmpty()) &#123;<br>        <span class="hljs-type">TreeNode</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> s.pop();<br>        System.out.println(temp.val);<br>        <span class="hljs-keyword">if</span> (temp.right != <span class="hljs-literal">null</span>)&#123;<br>            s.push(temp.right);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (temp.left != <span class="hljs-literal">null</span>)&#123;<br>            s.push(temp.left);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="LeetCode033-搜索旋转排序数组"><a href="#LeetCode033-搜索旋转排序数组" class="headerlink" title="LeetCode033 搜索旋转排序数组"></a>LeetCode033 搜索旋转排序数组</h3><h3 id="LeetCode394-字符串解码"><a href="#LeetCode394-字符串解码" class="headerlink" title="LeetCode394 字符串解码"></a>LeetCode394 字符串解码</h3><p>给定一个经过编码的字符串，返回它解码后的字符串。</p><p>编码规则为: <code>k[encoded_string]</code>，表示其中方括号内部的 <code>encoded_string</code> 正好重复 <code>k</code> 次。注意 <code>k</code> 保证为正整数。</p><p>你可以认为输入字符串总是有效的；输入字符串中没有额外的空格，且输入的方括号总是符合格式要求的。<br>此外，你可以认为原始数据不包含数字，所有的数字只表示重复的次数 <code>k</code> ，例如不会出现像 <code>3a</code> 或 <code>2[4]</code> 的输入。</p><p><strong>示例 1</strong></p><p><strong>输入：</strong> s &#x3D; “3[a]2[bc]”<br><strong>输出：</strong>“aaabcbc”</p><p><strong>示例 2：</strong></p><p><strong>输入：</strong> s &#x3D; “3[a2[c]]”<br><strong>输出：</strong>“accaccacc”</p><p><strong>示例 3：</strong></p><p><strong>输入：</strong> s &#x3D; “2[abc]3[cd]ef”<br><strong>输出：</strong>“abcabccdcdcdef”</p><p><strong>示例 4：</strong></p><p><strong>输入：</strong> s &#x3D; “abc3[cd]xyz”<br><strong>输出：</strong>“abccdcdcdxyz”</p><p><strong>提示：</strong></p><ul><li><code>1 &lt;= s.length &lt;= 30</code></li><li><code>s</code> 由小写英文字母、数字和方括号 <code>&#39;[]&#39;</code> 组成</li><li><code>s</code> 保证是一个 <strong>有效</strong> 的输入。</li><li><code>s</code> 中所有整数的取值范围为 <code>[1, 300]</code></li></ul><p>题目类型：栈</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> String <span class="hljs-title function_">decodeString</span><span class="hljs-params">(String s)</span> &#123;  <br>    <span class="hljs-type">int</span> <span class="hljs-variable">len</span> <span class="hljs-operator">=</span> s.length();  <br>    <span class="hljs-type">String</span> <span class="hljs-variable">result</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>    LinkedList&lt;Character&gt; list = <span class="hljs-keyword">new</span> <span class="hljs-title class_">LinkedList</span>&lt;&gt;();  <br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; len; i++) &#123;  <br>        <span class="hljs-keyword">if</span> (s.charAt(i) &lt;= <span class="hljs-string">&#x27;z&#x27;</span> &amp;&amp; s.charAt(i) &gt;= <span class="hljs-string">&#x27;a&#x27;</span>) &#123;  <br>            <span class="hljs-keyword">if</span> (list.isEmpty()) &#123;  <br>                result += s.charAt(i);  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                list.add(s.charAt(i));  <br>            &#125;  <br>        &#125; <span class="hljs-keyword">else</span> &#123;  <br>            <span class="hljs-keyword">if</span> (s.charAt(i) != <span class="hljs-string">&#x27;]&#x27;</span>) &#123;  <br>                list.add(s.charAt(i));  <br>            &#125; <span class="hljs-keyword">else</span> &#123;  <br>                <span class="hljs-type">StringBuilder</span> <span class="hljs-variable">builder</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">StringBuilder</span>();  <br>                <span class="hljs-keyword">while</span> (list.getLast() != <span class="hljs-string">&#x27;[&#x27;</span>) &#123;  <br>                    builder.append(list.removeLast());  <br>                &#125;  <br>                list.removeLast();  <br>                builder.reverse();  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">str1</span> <span class="hljs-operator">=</span> builder.toString();  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">temp</span> <span class="hljs-operator">=</span> list.removeLast() - <span class="hljs-string">&#x27;0&#x27;</span>;  <br>                <span class="hljs-type">int</span> <span class="hljs-variable">index</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>;  <br>                <span class="hljs-keyword">if</span> (!list.isEmpty())&#123;  <br>                    <span class="hljs-keyword">while</span> (!list.isEmpty()&amp;&amp;list.getLast() &gt;= <span class="hljs-string">&#x27;0&#x27;</span> &amp;&amp; list.getLast() &lt;= <span class="hljs-string">&#x27;9&#x27;</span>)&#123;  <br>                        temp = (<span class="hljs-type">int</span>) ((list.removeLast() - <span class="hljs-string">&#x27;0&#x27;</span>) * Math.pow(<span class="hljs-number">10</span>, index) + temp);  <br>                        index++;  <br>                    &#125;  <br>                &#125;  <br>                <span class="hljs-type">String</span> <span class="hljs-variable">str2</span> <span class="hljs-operator">=</span> <span class="hljs-string">&quot;&quot;</span>;  <br>                <span class="hljs-keyword">while</span> (temp &gt; <span class="hljs-number">0</span>) &#123;  <br>                    str2 += str1;  <br>                    temp--;  <br>                &#125;  <br>                <span class="hljs-keyword">if</span> (list.isEmpty())&#123;  <br>                    result += str2;  <br>                &#125; <span class="hljs-keyword">else</span> &#123;  <br>                    <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; j &lt; str2.length(); j++) &#123;  <br>                        list.add(str2.charAt(j));  <br>                    &#125;  <br>                &#125;  <br>            &#125;  <br>        &#125;  <br>    &#125;  <br>    <span class="hljs-keyword">return</span> result;  <br>&#125;<br></code></pre></td></tr></table></figure><p>LinkedList常用方法：</p><table><thead><tr><th>方法</th><th>描述</th></tr></thead><tbody><tr><td>public boolean add(E e)</td><td>链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public void add(int index, E element)</td><td>向指定位置插入元素。</td></tr><tr><td>public boolean addAll(Collection c)</td><td>将一个集合的所有元素添加到链表后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public boolean addAll(int index, Collection c)</td><td>将一个集合的所有元素添加到链表的指定位置后面，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public void addFirst(E e)</td><td>元素添加到头部。</td></tr><tr><td>public void addLast(E e)</td><td>元素添加到尾部。</td></tr><tr><td>public boolean offer(E e)</td><td>向链表末尾添加元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public boolean offerFirst(E e)</td><td>头部插入元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public boolean offerLast(E e)</td><td>尾部插入元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public void clear()</td><td>清空链表。</td></tr><tr><td>public E removeFirst()</td><td>删除并返回第一个元素。</td></tr><tr><td>public E removeLast()</td><td>删除并返回最后一个元素。</td></tr><tr><td>public boolean remove(Object o)</td><td>删除某一元素，返回是否成功，成功为 true，失败为 false。</td></tr><tr><td>public E remove(int index)</td><td>删除指定位置的元素。</td></tr><tr><td>public E poll()</td><td>删除并返回第一个元素。</td></tr><tr><td>public E remove()</td><td>删除并返回第一个元素。</td></tr><tr><td>public boolean contains(Object o)</td><td>判断是否含有某一元素。</td></tr><tr><td>public E get(int index)</td><td>返回指定位置的元素。</td></tr><tr><td>public E getFirst()</td><td>返回第一个元素。</td></tr><tr><td>public E getLast()</td><td>返回最后一个元素。</td></tr><tr><td>public int indexOf(Object o)</td><td>查找指定元素从前往后第一次出现的索引。</td></tr><tr><td>public int lastIndexOf(Object o)</td><td>查找指定元素最后一次出现的索引。</td></tr><tr><td>public E peek()</td><td>返回第一个元素。</td></tr><tr><td>public E element()</td><td>返回第一个元素。</td></tr><tr><td>public E peekFirst()</td><td>返回头部元素。</td></tr><tr><td>public E peekLast()</td><td>返回尾部元素。</td></tr><tr><td>public E set(int index, E element)</td><td>设置指定位置的元素。</td></tr><tr><td>public Object clone()</td><td>克隆该列表。</td></tr><tr><td>public Iterator descendingIterator()</td><td>返回倒序迭代器。</td></tr><tr><td>public int size()</td><td>返回链表元素个数。</td></tr><tr><td>public ListIterator listIterator(int index)</td><td>返回从指定位置开始到末尾的迭代器。</td></tr><tr><td>public Object[] toArray()</td><td>返回一个由链表元素组成的数组。</td></tr><tr><td>public T[] toArray(T[] a)</td><td>返回一个由链表元素转换类型而成的数组。</td></tr></tbody></table><p>StringBuilder常用方法：</p><table><thead><tr><th>序号</th><th>方法描述</th></tr></thead><tbody><tr><td>1</td><td>public StringBuffer append(String s)  <br>将指定的字符串追加到此字符序列。</td></tr><tr><td>2</td><td>public StringBuffer reverse()  <br> 将此字符序列用其反转形式取代。</td></tr><tr><td>3</td><td>public delete(int start, int end)  <br>移除此序列的子字符串中的字符。</td></tr><tr><td>4</td><td>public insert(int offset, int i)  <br>将 <code>int</code> 参数的字符串表示形式插入此序列中。</td></tr><tr><td>5</td><td>insert(int offset, String str)  <br>将 <code>str</code> 参数的字符串插入此序列中。</td></tr><tr><td>6</td><td>replace(int start, int end, String str)  <br>使用给定 <code>String</code> 中的字符替换此序列的子字符串中的字符。</td></tr></tbody></table><table><thead><tr><th>序号</th><th>方法描述</th></tr></thead><tbody><tr><td>1</td><td>int capacity()  <br>返回当前容量。</td></tr><tr><td>2</td><td>char charAt(int index)  <br>返回此序列中指定索引处的 <code>char</code> 值。</td></tr><tr><td>3</td><td>void ensureCapacity(int minimumCapacity)  <br>确保容量至少等于指定的最小值。</td></tr><tr><td>4</td><td>void getChars(int srcBegin, int srcEnd, char[] dst, int dstBegin)  <br>将字符从此序列复制到目标字符数组 <code>dst</code>。</td></tr><tr><td>5</td><td>int indexOf(String str)  <br>返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td>6</td><td>int indexOf(String str, int fromIndex)  <br>从指定的索引处开始，返回第一次出现的指定子字符串在该字符串中的索引。</td></tr><tr><td>7</td><td>int lastIndexOf(String str)  <br>返回最右边出现的指定子字符串在此字符串中的索引。</td></tr><tr><td>8</td><td>int lastIndexOf(String str, int fromIndex)  <br>返回 String 对象中子字符串最后出现的位置。</td></tr><tr><td>9</td><td>int length()  <br> 返回长度（字符数）。</td></tr><tr><td>10</td><td>void setCharAt(int index, char ch)  <br>将给定索引处的字符设置为 <code>ch</code>。</td></tr><tr><td>11</td><td>void setLength(int newLength)  <br>设置字符序列的长度。</td></tr><tr><td>12</td><td>CharSequence subSequence(int start, int end)  <br>返回一个新的字符序列，该字符序列是此序列的子序列。</td></tr><tr><td>13</td><td>String substring(int start)  <br>返回一个新的 <code>String</code>，它包含此字符序列当前所包含的字符子序列。</td></tr><tr><td>14</td><td>String substring(int start, int end)  <br>返回一个新的 <code>String</code>，它包含此序列当前所包含的字符子序列。</td></tr><tr><td>15</td><td>String toString()  <br>返回此序列中数据的字符串表示形式</td></tr></tbody></table>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>about</title>
    <link href="/2023/11/17/ShardingSphere5/"/>
    <url>/2023/11/17/ShardingSphere5/</url>
    
    <content type="html"><![CDATA[<h1 id="第01章-高性能架构模式"><a href="#第01章-高性能架构模式" class="headerlink" title="第01章 高性能架构模式"></a>第01章 高性能架构模式</h1><p>互联网业务兴起之后，海量用户加上海量数据的特点，单个数据库服务器已经难以满足业务需要，必须考虑数据库集群的方式来提升性能。高性能数据库集群的<code>第一种方式是“读写分离”</code>，<code>第二种方式是“数据库分片”</code></p><h2 id="1、读写分离架构"><a href="#1、读写分离架构" class="headerlink" title="1、读写分离架构"></a>1、读写分离架构</h2><p><strong>读写分离原理：</strong>读写分离的基本原理是将数据库读写操作分散到不同的节点上，下面是其基本架构图：</p><p><img src="362d22168bf344687ec0c206aa115807.jpg" alt="img"></p><p><strong>读写分离的基本实现：</strong></p><ul><li><code>主库负责处理事务性的增删改操作，从库负责处理查询操作</code>，能够有效的避免由数据更新导致的行锁，使得整个系统的查询性能得到极大的改善。</li><li>读写分离是<code>根据 SQL 语义的分析</code>，<code>将读操作和写操作分别路由至主库与从库</code>。</li><li>通过<code>一主多从</code>的配置方式，可以将查询请求均匀的分散到多个数据副本，能够进一步的提升系统的处理能力。 </li><li>使用<code>多主多从</code>的方式，不但能够提升系统的吞吐量，还能够提升系统的可用性，可以达到在任何一个数据库宕机，甚至磁盘物理损坏的情况下仍然不影响系统的正常运行。</li></ul><p><strong>下图展示了根据业务需要，将用户表的写操作和读操路由到不同的数据库的方案：</strong></p><p><img src="image-20220804223138651.png" alt="image-20220804223138651"></p><p><strong>CAP 理论：</strong></p><p>CAP 定理（CAP theorem）又被称作布鲁尔定理（Brewer’s theorem），是加州大学伯克利分校的计算机科学家埃里克·布鲁尔（Eric Brewer）在 2000 年的 ACM PODC 上提出的一个猜想。<code>对于设计分布式系统的架构师来说，CAP 是必须掌握的理论。</code></p><p>在一个<code>分布式系统中</code>，当涉及读写操作时，只能保证一致性（Consistence）、可用性（Availability）、分区容错性（Partition Tolerance）三者中的两个，另外一个必须被牺牲。</p><ul><li>C 一致性（Consistency）：对某个指定的客户端来说，读操作保证能够返回最新的写操作结果</li><li>A 可用性（Availability）：非故障的节点在合理的时间内返回合理的响应<code>（不是错误和超时的响应）</code></li><li>P 分区容忍性（Partition Tolerance）：当出现网络分区后<code>（可能是丢包，也可能是连接中断，还可能是拥塞）</code>，系统能够继续“履行职责”</li></ul><p><strong>CAP特点：</strong></p><ul><li><p>在实际设计过程中，每个系统不可能只处理一种数据，而是包含多种类型的数据，<code>有的数据必须选择 CP，有的数据必须选择 AP，分布式系统理论上不可能选择 CA 架构。</code></p><ul><li>CP：如下图所示，<code>为了保证一致性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 需要返回 Error，提示客户端 C“系统现在发生了错误”，</code>这种处理方式<code>违背了可用性</code>（Availability）的要求，因此 CAP 三者只能满足 CP。</li></ul><p><img src="6e7d7bd54d7a4eb67918080863d354d7.png" alt="img"></p><ul><li>AP：如下图所示，<code>为了保证可用性</code>，当发生分区现象后，N1 节点上的数据已经更新到 y，但由于 N1 和 N2 之间的复制通道中断，数据 y 无法同步到 N2，N2 节点上的数据还是 x。<code>这时客户端 C 访问 N2 时，N2 将当前自己拥有的数据 x 返回给客户端 C 了</code>，而实际上当前最新的数据已经是 y 了，这就<code>不满足一致性</code>（Consistency）的要求了，因此 CAP 三者只能满足 AP。注意：这里 N2 节点返回 x，虽然不是一个“正确”的结果，但是一个“合理”的结果，因为 x 是旧的数据，并不是一个错乱的值，只是不是最新的数据而已。</li></ul></li></ul><p><img src="2ccafe41de9bd7f8dec4658f004310d6.png" alt="img"></p><ul><li><p>CAP 理论中的 <code>C 在实践中是不可能完美实现的</code>，在数据复制的过程中，节点N1 和节点 N2 的数据并不一致（强一致性）。即使无法做到<code>强一致性</code>，但应用可以采用适合的方式达到<code>最终一致性</code>。具有如下特点：</p><ul><li>基本可用（Basically Available）：分布式系统在出现故障时，允许损失部分可用性，即保证核心可用。</li><li>软状态（Soft State）：允许系统存在中间状态，而该中间状态不会影响系统整体可用性。这里的中间状态就是 CAP 理论中的数据不一致。</li><li><code>最终一致性（Eventual Consistency）：系统中的所有数据副本经过一定时间后，最终能够达到一致的状态。</code></li></ul></li></ul><h2 id="2、数据库分片架构"><a href="#2、数据库分片架构" class="headerlink" title="2、数据库分片架构"></a>2、数据库分片架构</h2><p><strong>读写分离的问题：</strong></p><p>读写分离分散了数据库读写操作的压力，但没有分散存储压力，为了满足业务数据存储的需求，就需要<code>将存储分散到多台数据库服务器上</code>。</p><p><strong>数据分片：</strong></p><p>将存放在单一数据库中的数据分散地存放至多个数据库或表中，以达到提升性能瓶颈以及可用性的效果。 数据分片的有效手段是对关系型数据库进行<code>分库和分表</code>。数据分片的拆分方式又分为<code>垂直分片和水平分片</code>。</p><h3 id="2-1、垂直分片"><a href="#2-1、垂直分片" class="headerlink" title="2.1、垂直分片"></a>2.1、垂直分片</h3><p><strong>垂直分库：</strong></p><p><code>按照业务拆分的方式称为垂直分片，又称为纵向拆分</code>，它的核心理念是专库专用。 在拆分之前，一个数据库由多个数据表构成，每个表对应着不同的业务。而拆分之后，则是按照业务将表进行归类，分布到不同的数据库中，从而将压力分散至不同的数据库。 </p><p><img src="71f41d46cc5c0405f4d4dc944b4350c9.jpg" alt="img"></p><p>下图展示了根据业务需要，将用户表和订单表垂直分片到不同的数据库的方案：</p><p><img src="image-20220804221855449.png" alt="image-20220804221855449"></p><p>垂直拆分可以缓解数据量和访问量带来的问题，但无法根治。<code>如果垂直拆分之后，表中的数据量依然超过单节点所能承载的阈值，则需要水平分片来进一步处理。</code></p><p><strong>垂直分表：</strong></p><p><code>垂直分表适合将表中某些不常用的列，或者是占了大量空间的列拆分出去。</code></p><p>假设我们是一个婚恋网站，用户在筛选其他用户的时候，主要是用 age 和 sex 两个字段进行查询，而 nickname 和 description 两个字段主要用于展示，一般不会在业务查询中用到。description 本身又比较长，因此我们可以将这两个字段独立到另外一张表中，这样在查询 age 和 sex 时，就能带来一定的性能提升。</p><p>垂直分表引入的复杂性主要体现在表操作的数量要增加。例如，原来只要一次查询就可以获取 name、age、sex、nickname、description，现在需要两次查询，一次查询获取 name、age、sex，另外一次查询获取 nickname、description。</p><p><img src="136bc2f01919edcb8271df6f7e71af40.jpg" alt="img"></p><p><code>水平分表适合表行数特别大的表，水平分表属于水平分片</code>。</p><h3 id="2-2、水平分片"><a href="#2-2、水平分片" class="headerlink" title="2.2、水平分片"></a>2.2、水平分片</h3><p><code>水平分片又称为横向拆分。</code> 相对于垂直分片，它不再将数据根据业务逻辑分类，而是通过某个字段（或某几个字段），根据某种规则将数据分散至多个库或表中，每个分片仅包含数据的一部分。 例如：根据主键分片，偶数主键的记录放入 0 库（或表），奇数主键的记录放入 1 库（或表），如下图所示。</p><p><img src="image-20220804222212087.png" alt="image-20220804222212087"></p><p><code>单表进行切分后，是否将多个表分散在不同的数据库服务器中，可以根据实际的切分效果来确定。</code></p><ul><li><p><strong>水平分表：</strong>单表切分为多表后，新的表即使在同一个数据库服务器中，也可能带来可观的性能提升，如果性能能够满足业务要求，可以不拆分到多台数据库服务器，毕竟业务分库也会引入很多复杂性；</p></li><li><p><strong>水平分库：</strong>如果单表拆分为多表后，单台服务器依然无法满足性能要求，那就需要将多个表分散在不同的数据库服务器中。</p></li></ul><blockquote><p><strong>阿里巴巴Java开发手册：</strong></p><p>【推荐】单表行数超过 500 万行或者单表容量超过 2GB，才推荐进行分库分表。</p><p>说明：如果预计三年后的数据量根本达不到这个级别，<code>请不要在创建表时就分库分表</code>。</p></blockquote><h2 id="3、读写分离和数据分片架构"><a href="#3、读写分离和数据分片架构" class="headerlink" title="3、读写分离和数据分片架构"></a>3、读写分离和数据分片架构</h2><p> 下图展现了将数据分片与读写分离一同使用时，应用程序与数据库集群之间的复杂拓扑关系。</p><p><img src="image-20220804223321167.png" alt="image-20220804223321167"></p><h2 id="4、实现方式"><a href="#4、实现方式" class="headerlink" title="4、实现方式"></a>4、实现方式</h2><p>读写分离和数据分片具体的实现方式一般有两种：  <code>程序代码封装</code>和<code>中间件封装</code>。</p><h3 id="4-1、程序代码封装"><a href="#4-1、程序代码封装" class="headerlink" title="4.1、程序代码封装"></a>4.1、程序代码封装</h3><p>程序代码封装指在代码中抽象一个<code>数据访问层（或中间层封装）</code>，实现读写操作分离和数据库服务器连接的管理。</p><p><strong>其基本架构是：</strong>以读写分离为例</p><p><img src="f8d538f9201e3ebee37dfdcd1922e9df.jpg" alt="img"></p><h3 id="4-2、中间件封装"><a href="#4-2、中间件封装" class="headerlink" title="4.2、中间件封装"></a>4.2、中间件封装</h3><p>中间件封装指的是<code>独立一套系统出来</code>，实现读写操作分离和数据库服务器连接的管理。对于业务服务器来说，访问中间件和访问数据库没有区别，在业务服务器看来，中间件就是一个数据库服务器。</p><p><strong>基本架构是：</strong> 以读写分离为例</p><p><img src="2a2dba7f07581fd055d9cd5a3aa8388e.jpg" alt="img"></p><h3 id="4-3、常用解决方案"><a href="#4-3、常用解决方案" class="headerlink" title="4.3、常用解决方案"></a>4.3、常用解决方案</h3><p>Apache ShardingSphere（程序级别和中间件级别）</p><p>MyCat（数据库中间件） </p><h1 id="第02章-ShardingSphere"><a href="#第02章-ShardingSphere" class="headerlink" title="第02章 ShardingSphere"></a>第02章 ShardingSphere</h1><h2 id="1、简介"><a href="#1、简介" class="headerlink" title="1、简介"></a>1、简介</h2><p>官网：<a href="https://shardingsphere.apache.org/index_zh.html">https://shardingsphere.apache.org/index_zh.html</a></p><p>文档：<a href="https://shardingsphere.apache.org/document/5.1.1/cn/overview/">https://shardingsphere.apache.org/document/5.1.1/cn/overview/</a></p><p>Apache ShardingSphere 由 JDBC、Proxy 和 Sidecar（规划中）这 3 款既能够独立部署，又支持混合部署配合使用的产品组成。 </p><h2 id="2、ShardingSphere-JDBC"><a href="#2、ShardingSphere-JDBC" class="headerlink" title="2、ShardingSphere-JDBC"></a>2、ShardingSphere-JDBC</h2><p><strong>程序代码封装</strong></p><p>定位为轻量级 Java 框架，<code>在 Java 的 JDBC 层提供的额外服务</code>。 它使用客户端直连数据库，<code>以 jar 包形式提供服务</code>，无需额外部署和依赖，可理解为增强版的 JDBC 驱动，完全兼容 JDBC 和各种 ORM 框架。</p><p><img src="image-20220804195402870.png" alt="image-20220804195402870"></p><h2 id="3、ShardingSphere-Proxy"><a href="#3、ShardingSphere-Proxy" class="headerlink" title="3、ShardingSphere-Proxy"></a>3、ShardingSphere-Proxy</h2><p><strong>中间件封装</strong></p><p>定位为透明化的<code>数据库代理端</code>，提供封装了数据库二进制协议的服务端版本，用于完成对异构语言的支持。 目前提供 MySQL 和 PostgreSQL版本，它可以使用任何兼容 MySQL&#x2F;PostgreSQL 协议的访问客户端（如：MySQL Command Client, MySQL Workbench, Navicat 等）操作数据，对 DBA 更加友好。</p><p><img src="image-20220804195432673.png" alt="image-20220804195432673"></p><h1 id="第03章-MySQL主从同步"><a href="#第03章-MySQL主从同步" class="headerlink" title="第03章 MySQL主从同步"></a>第03章 MySQL主从同步</h1><h2 id="1、MySQL主从同步原理"><a href="#1、MySQL主从同步原理" class="headerlink" title="1、MySQL主从同步原理"></a>1、MySQL主从同步原理</h2><p><img src="image-20220714133617856.png" alt="img"></p><p><strong>基本原理：</strong></p><p>slave会从master读取binlog来进行数据同步</p><p><strong>具体步骤：</strong></p><ul><li><code>step1：</code>master将数据改变记录到<code>二进制日志（binary log）</code>中。</li><li><code>step2：</code> 当slave上执行 <code>start slave</code> 命令之后，slave会创建一个 <code>IO 线程</code>用来连接master，请求master中的binlog。</li><li><code>step3：</code>当slave连接master时，master会创建一个 <code>log dump 线程</code>，用于发送 binlog 的内容。在读取 binlog 的内容的操作中，会对主节点上的 binlog 加锁，当读取完成并发送给从服务器后解锁。</li><li><code>step4：</code>IO 线程接收主节点 binlog dump 进程发来的更新之后，保存到 <code>中继日志（relay log）</code> 中。</li><li><code>step5：</code>slave的<code>SQL线程</code>，读取relay log日志，并解析成具体操作，从而实现主从操作一致，最终数据一致。</li></ul><h2 id="2、一主多从配置"><a href="#2、一主多从配置" class="headerlink" title="2、一主多从配置"></a>2、一主多从配置</h2><p>服务器规划：使用<code>docker</code>方式创建，<code>主从服务器IP一致，端口号不一致</code></p><p><img src="image-20220807183231101.png" alt="image-20220807183231101"></p><ul><li>主服务器：容器名<code>atguigu-mysql-master</code>，端口<code>3306</code></li><li>从服务器：容器名<code>atguigu-mysql-slave1</code>，端口<code>3307</code></li><li>从服务器：容器名<code>atguigu-mysql-slave2</code>，端口<code>3308</code></li></ul><p><strong>注意：</strong>如果此时防火墙是开启的，<code>则先关闭防火墙，并重启docker</code>，否则后续安装的MySQL无法启动</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭docker</span><br>systemctl stop docker<br><span class="hljs-meta prompt_">#</span><span class="language-bash">关闭防火墙</span><br>systemctl stop firewalld<br><span class="hljs-meta prompt_">#</span><span class="language-bash">启动docker</span><br>systemctl start docker<br></code></pre></td></tr></table></figure><h3 id="2-1、准备主服务器"><a href="#2-1、准备主服务器" class="headerlink" title="2.1、准备主服务器"></a>2.1、准备主服务器</h3><ul><li><strong>step1：在docker中创建并启动MySQL主服务器：</strong><code>端口3306</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3306:3306 \<br>-v /atguigu/mysql/master/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/master/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql-master \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL主服务器配置文件：</strong></li></ul><p>默认情况下MySQL的binlog日志是自动开启的，可以通过如下配置定义一些可选配置</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /atguigu/mysql/master/conf/my.cnf<br></code></pre></td></tr></table></figure><p>配置如下内容</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 服务器唯一id，默认值1</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">1</span><br><span class="hljs-comment"># 设置日志格式，默认值ROW</span><br><span class="hljs-attr">binlog_format</span>=<span class="hljs-string">STATEMENT</span><br><span class="hljs-comment"># 二进制日志名，默认binlog</span><br><span class="hljs-comment"># log-bin=binlog</span><br><span class="hljs-comment"># 设置需要复制的数据库，默认复制全部数据库</span><br><span class="hljs-comment">#binlog-do-db=mytestdb</span><br><span class="hljs-comment"># 设置不需要复制的数据库</span><br><span class="hljs-comment">#binlog-ignore-db=mysql</span><br><span class="hljs-comment">#binlog-ignore-db=infomation_schema</span><br></code></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart atguigu-mysql-master<br></code></pre></td></tr></table></figure><p><code>binlog格式说明：</code></p><ul><li>binlog_format&#x3D;STATEMENT：日志记录的是主机数据库的<code>写指令</code>，性能高，但是now()之类的函数以及获取系统参数的操作会出现主从数据不同步的问题。</li><li>binlog_format&#x3D;ROW（默认）：日志记录的是主机数据库的<code>写后的数据</code>，批量操作时性能较差，解决now()或者  user()或者  @@hostname 等操作在主从机器上不一致的问题。</li><li>binlog_format&#x3D;MIXED：是以上两种level的混合使用，有函数用ROW，没函数用STATEMENT，但是无法识别系统变量</li></ul><p><code>binlog-ignore-db和binlog-do-db的优先级问题：</code></p><p><img src="0.08703112216569037.png" alt="img"></p><ul><li><strong>step3：使用命令行登录MySQL主服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：<span class="hljs-built_in">env</span> LANG=C.UTF-8 避免容器中显示中文乱码</span><br>docker exec -it atguigu-mysql-master env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码校验方式</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step4：主机中创建slave用户：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 创建slave用户</span><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-comment">-- 设置密码</span><br><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br><span class="hljs-comment">-- 授予复制权限</span><br><span class="hljs-keyword">GRANT</span> REPLICATION SLAVE <span class="hljs-keyword">ON</span> <span class="hljs-operator">*</span>.<span class="hljs-operator">*</span> <span class="hljs-keyword">TO</span> <span class="hljs-string">&#x27;atguigu_slave&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span>;<br><span class="hljs-comment">-- 刷新权限</span><br>FLUSH PRIVILEGES;<br></code></pre></td></tr></table></figure><ul><li><strong>step5：主机中查询master状态：</strong></li></ul><p>执行完此步骤后<code>不要再操作主服务器MYSQL</code>，防止主服务器状态值变化</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br></code></pre></td></tr></table></figure><p>记下<code>File</code>和<code>Position</code>的值。执行完此步骤后不要再操作主服务器MYSQL，防止主服务器状态值变化。</p><p><img src="image-20220804191852164.png" alt="img"></p><h3 id="2-2、准备从服务器"><a href="#2-2、准备从服务器" class="headerlink" title="2.2、准备从服务器"></a>2.2、准备从服务器</h3><p>可以配置多台从机slave1、slave2…，这里以配置slave1为例</p><ul><li><strong>step1：在docker中创建并启动MySQL从服务器：</strong><code>端口3307</code></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3307:3306 \<br>-v /atguigu/mysql/slave1/conf:/etc/mysql/conf.d \<br>-v /atguigu/mysql/slave1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name atguigu-mysql-slave1 \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure><ul><li><strong>step2：创建MySQL从服务器配置文件：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">vim /atguigu/mysql/slave1/conf/my.cnf<br></code></pre></td></tr></table></figure><p>配置如下内容：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">[mysqld]</span><br><span class="hljs-comment"># 服务器唯一id，每台服务器的id必须不同，如果配置其他从机，注意修改id</span><br><span class="hljs-attr">server-id</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"># 中继日志名，默认xxxxxxxxxxxx-relay-bin</span><br><span class="hljs-comment">#relay-log=relay-bin</span><br></code></pre></td></tr></table></figure><p>重启MySQL容器</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart atguigu-mysql-slave1<br></code></pre></td></tr></table></figure><ul><li><strong>step3：使用命令行登录MySQL从服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it atguigu-mysql-slave1 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码校验方式</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step4：在从机上配置主从关系：</strong></li></ul><p>在<strong>从机</strong>上执行以下SQL操作</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql">CHANGE MASTER <span class="hljs-keyword">TO</span> MASTER_HOST<span class="hljs-operator">=</span><span class="hljs-string">&#x27;192.168.100.201&#x27;</span>, <br>MASTER_USER<span class="hljs-operator">=</span><span class="hljs-string">&#x27;atguigu_slave&#x27;</span>,MASTER_PASSWORD<span class="hljs-operator">=</span><span class="hljs-string">&#x27;123456&#x27;</span>, MASTER_PORT<span class="hljs-operator">=</span><span class="hljs-number">3306</span>,<br>MASTER_LOG_FILE<span class="hljs-operator">=</span><span class="hljs-string">&#x27;binlog.000003&#x27;</span>,MASTER_LOG_POS<span class="hljs-operator">=</span><span class="hljs-number">1357</span>; <br></code></pre></td></tr></table></figure><h3 id="2-3、启动主从同步"><a href="#2-3、启动主从同步" class="headerlink" title="2.3、启动主从同步"></a>2.3、启动主从同步</h3><p>启动从机的复制功能，执行SQL：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">START</span> SLAVE;<br><span class="hljs-comment">-- 查看状态（不需要分号）</span><br><span class="hljs-keyword">SHOW</span> SLAVE STATUS\G<br></code></pre></td></tr></table></figure><p><strong>两个关键进程：</strong> 下面两个参数都是Yes，则说明主从配置成功！</p><p><img src="image-20220715000533951.png" alt="img"></p><h3 id="2-4、实现主从同步"><a href="#2-4、实现主从同步" class="headerlink" title="2.4、实现主从同步"></a>2.4、实现主从同步</h3><p>在主机中执行以下SQL，在从机中查看数据库、表和数据是否已经被同步</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_user;<br>USE db_user;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user (<br> id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br> uname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br> <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_user(uname) <span class="hljs-keyword">VALUES</span>(<span class="hljs-string">&#x27;zhang3&#x27;</span>);<br><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> t_user(uname) <span class="hljs-keyword">VALUES</span>(@<span class="hljs-variable">@hostname</span>);<br></code></pre></td></tr></table></figure><h3 id="2-5、停止和重置"><a href="#2-5、停止和重置" class="headerlink" title="2.5、停止和重置"></a>2.5、停止和重置</h3><p>需要的时候，可以使用如下SQL语句</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在从机上执行。功能说明：停止I/O 线程和SQL线程的操作。</span><br>stop slave; <br><br><span class="hljs-comment">-- 在从机上执行。功能说明：用于删除SLAVE数据库的relaylog日志文件，并重新启用新的relaylog文件。</span><br>reset slave;<br><br><span class="hljs-comment">-- 在主机上执行。功能说明：删除所有的binglog日志文件，并将日志索引文件清空，重新开始所有新的日志文件。</span><br><span class="hljs-comment">-- 用于第一次进行搭建主从库时，进行主库binlog初始化工作；</span><br>reset master;<br></code></pre></td></tr></table></figure><h3 id="2-6、常见问题"><a href="#2-6、常见问题" class="headerlink" title="2.6、常见问题"></a><strong>2.6、常见问题</strong></h3><h4 id="问题1"><a href="#问题1" class="headerlink" title="问题1"></a>问题1</h4><p>启动主从同步后，常见错误是<code>Slave_IO_Running： No 或者 Connecting</code> 的情况，此时查看下方的 <code>Last_IO_ERROR</code>错误日志，根据日志中显示的错误信息在网上搜索解决方案即可</p><p><img src="image-20220714235426120.png" alt="img"></p><p><strong>典型的错误例如：</strong><code>Last_IO_Error: Got fatal error 1236 from master when reading data from binary log: &#39;Client requested master to start replication from position &gt; file size&#39;</code></p><p><strong>解决方案：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-comment">-- 在从机停止slave</span><br>SLAVE STOP;<br><br><span class="hljs-comment">-- 在主机查看mater状态</span><br><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br><span class="hljs-comment">-- 在主机刷新日志</span><br>FLUSH LOGS;<br><span class="hljs-comment">-- 再次在主机查看mater状态（会发现File和Position发生了变化）</span><br><span class="hljs-keyword">SHOW</span> MASTER STATUS;<br><span class="hljs-comment">-- 修改从机连接主机的SQL，并重新连接即可</span><br></code></pre></td></tr></table></figure><h4 id="问题2"><a href="#问题2" class="headerlink" title="问题2"></a>问题2</h4><p>启动docker容器后提示 <code>WARNING: IPv4 forwarding is disabled. Networking will not work.</code></p><p><img src="image-20220715004850504.png" alt="img"></p><p>此错误，虽然不影响主从同步的搭建，但是如果想从远程客户端通过以下方式连接docker中的MySQL则没法连接</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">C:\Users\administrator&gt;mysql -h 192.168.100.201 -P 3306 -u root -p<br></code></pre></td></tr></table></figure><p><strong>解决方案：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">修改配置文件：</span><br>vim /usr/lib/sysctl.d/00-system.conf<br><span class="hljs-meta prompt_">#</span><span class="language-bash">追加</span><br>net.ipv4.ip_forward=1<br><span class="hljs-meta prompt_">#</span><span class="language-bash">接着重启网络</span><br>systemctl restart network<br></code></pre></td></tr></table></figure><h1 id="第04章-ShardingSphere-JDBC读写分离"><a href="#第04章-ShardingSphere-JDBC读写分离" class="headerlink" title="第04章 ShardingSphere-JDBC读写分离"></a>第04章 ShardingSphere-JDBC读写分离</h1><h2 id="1、创建SpringBoot程序"><a href="#1、创建SpringBoot程序" class="headerlink" title="1、创建SpringBoot程序"></a>1、创建SpringBoot程序</h2><h3 id="1-1、创建项目"><a href="#1-1、创建项目" class="headerlink" title="1.1、创建项目"></a>1.1、创建项目</h3><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：<a href="http://start.aliyun.com/">http://start.aliyun.com</a></p><p>项目名：sharding-jdbc-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h3 id="1-2、添加依赖"><a href="#1-2、添加依赖" class="headerlink" title="1.2、添加依赖"></a>1.2、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shardingsphere<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shardingsphere-jdbc-core-spring-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.1.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br>    <br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="1-3、创建实体类"><a href="#1-3、创建实体类" class="headerlink" title="1.3、创建实体类"></a>1.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-comment">//在用户创建user时没有创建id，在写入数据库时会用到数据库中的主键自增策略</span><br>    <span class="hljs-comment">//</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String uname;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="1-4、创建Mapper"><a href="#1-4、创建Mapper" class="headerlink" title="1.4、创建Mapper"></a>1.4、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="1-5、配置读写分离"><a href="#1-5、配置读写分离" class="headerlink" title="1.5、配置读写分离"></a>1.5、配置读写分离</h3><p>application.properties：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">sharging-jdbc-demo</span><br><span class="hljs-comment"># 开发环境设置</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"># 内存模式</span><br><span class="hljs-attr">spring.shardingsphere.mode.type</span>=<span class="hljs-string">Memory</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置真实数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">master,slave1,slave2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 1 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3306/db_user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.master.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 2 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3307/db_user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave1.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 3 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3308/db_user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.slave2.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 读写分离类型，如: Static，Dynamic</span><br><span class="hljs-comment"># myds是数据源名称，static表示上面jdbc-url是静态的</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.type</span>=<span class="hljs-string">Static</span><br><span class="hljs-comment"># 写数据源名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.write-data-source-name</span>=<span class="hljs-string">master</span><br><span class="hljs-comment"># 读数据源名称，多个从数据源用逗号分隔</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.props.read-data-source-names</span>=<span class="hljs-string">slave1,slave2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 负载均衡算法名称，alg_round轮询算法</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.data-sources.myds.load-balancer-name</span>=<span class="hljs-string">alg_round</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 负载均衡算法配置</span><br><span class="hljs-comment"># 负载均衡算法类型</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_round.type</span>=<span class="hljs-string">ROUND_ROBIN</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_random.type</span>=<span class="hljs-string">RANDOM</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.type</span>=<span class="hljs-string">WEIGHT</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave1</span>=<span class="hljs-string">1</span><br><span class="hljs-attr">spring.shardingsphere.rules.readwrite-splitting.load-balancers.alg_weight.props.slave2</span>=<span class="hljs-string">2</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 打印SQl</span><br><span class="hljs-attr">spring.shardingsphere.props.sql-show</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h2 id="2、测试"><a href="#2、测试" class="headerlink" title="2、测试"></a>2、测试</h2><h3 id="2-1、读写分离测试"><a href="#2-1、读写分离测试" class="headerlink" title="2.1、读写分离测试"></a>2.1、读写分离测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ReadwriteTest</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 写入数据的测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsert</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUname(<span class="hljs-string">&quot;张三丰&quot;</span>);<br>        userMapper.insert(user);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、事务测试"><a href="#2-2、事务测试" class="headerlink" title="2.2、事务测试"></a>2.2、事务测试</h3><p>为了保证主从库间的事务一致性，避免跨服务的分布式事务，ShardingSphere-JDBC的<code>主从模型中，事务中的数据读写均用主库</code>。</p><ul><li>不添加@Transactional：insert对主库操作，select对从库操作</li><li>添加@Transactional：则insert和select均对主库操作</li><li><strong>注意：</strong>在JUnit环境下的@Transactional注解，默认情况下就会对事务进行回滚（即使在没加注解@Rollback，也会对事务回滚）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 事务测试</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Transactional</span><span class="hljs-comment">//开启事务</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testTrans</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>    user.setUname(<span class="hljs-string">&quot;铁锤&quot;</span>);<br>    userMapper.insert(user);<br><br>    List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、负载均衡测试"><a href="#2-3、负载均衡测试" class="headerlink" title="2.3、负载均衡测试"></a>2.3、负载均衡测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读数据测试</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span>&#123;<br>    List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>    List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<span class="hljs-comment">//执行第二次测试负载均衡</span><br>    users.forEach(System.out::println);<br>&#125;<br><br></code></pre></td></tr></table></figure><p>也可以在web请求中测试负载均衡</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.controller;<br><br><span class="hljs-meta">@RestController</span><br><span class="hljs-meta">@RequestMapping(&quot;/userController&quot;)</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">UserController</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试负载均衡策略</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@GetMapping(&quot;selectAll&quot;)</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">selectAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第05章-ShardingSphere-JDBC垂直分片"><a href="#第05章-ShardingSphere-JDBC垂直分片" class="headerlink" title="第05章 ShardingSphere-JDBC垂直分片"></a>第05章 ShardingSphere-JDBC垂直分片</h1><h2 id="1、准备服务器"><a href="#1、准备服务器" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="image-20220807232456342.png" alt="image-20220807232456342"></p><ul><li><p>服务器：容器名<code>server-user</code>，端口<code>3301</code></p></li><li><p>服务器：容器名<code>server-order</code>，端口<code>3302</code></p></li></ul><h3 id="1-1、创建server-user容器"><a href="#1-1、创建server-user容器" class="headerlink" title="1.1、创建server-user容器"></a>1.1、创建server-user容器</h3><ul><li><strong>step1：创建容器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3301:3306 \<br>-v /atguigu/server/user/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/user/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-user \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure><ul><li><strong>step2：登录MySQL服务器：</strong></li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-user env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure><ul><li><strong>step3：创建数据库：</strong></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_user;<br>USE db_user;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_user (<br> id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br> uname <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br> <span class="hljs-keyword">PRIMARY</span> KEY (id)<br>);<br></code></pre></td></tr></table></figure><h3 id="1-2、创建server-order容器"><a href="#1-2、创建server-order容器" class="headerlink" title="1.2、创建server-order容器"></a>1.2、创建server-order容器</h3><ul><li><p><strong>step1：创建容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3302:3306 \<br>-v /atguigu/server/order/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure></li><li><p><strong>step2：登录MySQL服务器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><strong>step3：创建数据库：</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order (<br>  id <span class="hljs-type">BIGINT</span> AUTO_INCREMENT,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure></li></ul><h2 id="2、程序实现"><a href="#2、程序实现" class="headerlink" title="2、程序实现"></a>2、程序实现</h2><h3 id="2-1、创建实体类"><a href="#2-1、创建实体类" class="headerlink" title="2.1、创建实体类"></a>2.1、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_order&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Order</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-2、创建Mapper"><a href="#2-2、创建Mapper" class="headerlink" title="2.2、创建Mapper"></a>2.2、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Order&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-3、配置垂直分片"><a href="#2-3、配置垂直分片" class="headerlink" title="2.3、配置垂直分片"></a>2.3、配置垂直分片</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">sharding-jdbc-demo</span><br><span class="hljs-comment"># 环境设置</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置真实数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">server-user,server-order</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 1 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3301/db_user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 2 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3302/db_order</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 标准分片表配置（数据节点）</span><br><span class="hljs-comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span><br><span class="hljs-comment"># 值由数据源名 + 表名组成，以小数点分隔。</span><br><span class="hljs-comment"># &lt;table-name&gt;：逻辑表名</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="hljs-string">server-user.t_user</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="hljs-string">server-order.t_order</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 打印SQL</span><br><span class="hljs-attr">spring.shardingsphere.props.sql-show</span>=<span class="hljs-string">true</span><br><br></code></pre></td></tr></table></figure><h2 id="3、测试垂直分片"><a href="#3、测试垂直分片" class="headerlink" title="3、测试垂直分片"></a>3、测试垂直分片</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ShardingTest</span> &#123;<br><br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> OrderMapper orderMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 垂直分片：插入数据测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderAndUser</span><span class="hljs-params">()</span>&#123;<br><br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">User</span>();<br>        user.setUname(<span class="hljs-string">&quot;强哥&quot;</span>);<br>        userMapper.insert(user);<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>);<br>        order.setUserId(user.getId());<br>        order.setAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>        orderMapper.insert(order);<br><br>    &#125;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 垂直分片：查询数据测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectFromOrderAndUser</span><span class="hljs-params">()</span>&#123;<br>        <span class="hljs-type">User</span> <span class="hljs-variable">user</span> <span class="hljs-operator">=</span> userMapper.selectById(<span class="hljs-number">1L</span>);<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> orderMapper.selectById(<span class="hljs-number">1L</span>);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p><img src="image-20220810163534068.png" alt="image-20220810163534068"></p><p>ShardingSphere-JDBC远程连接的方式默认的密码加密规则是：mysql_native_password</p><p>因此需要在服务器端修改服务器的密码加密规则，如下：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">ALTER</span> <span class="hljs-keyword">USER</span> <span class="hljs-string">&#x27;root&#x27;</span>@<span class="hljs-string">&#x27;%&#x27;</span> IDENTIFIED <span class="hljs-keyword">WITH</span> mysql_native_password <span class="hljs-keyword">BY</span> <span class="hljs-string">&#x27;123456&#x27;</span>;<br></code></pre></td></tr></table></figure><h1 id="第06章-ShardingSphere-JDBC水平分片"><a href="#第06章-ShardingSphere-JDBC水平分片" class="headerlink" title="第06章 ShardingSphere-JDBC水平分片"></a>第06章 ShardingSphere-JDBC水平分片</h1><h2 id="1、准备服务器-1"><a href="#1、准备服务器-1" class="headerlink" title="1、准备服务器"></a>1、准备服务器</h2><p>服务器规划：使用<code>docker</code>方式创建如下容器</p><p><img src="image-20220808033239206.png" alt="image-20220808033239206"></p><ul><li><p>服务器：容器名<code>server-order0</code>，端口<code>3310</code></p></li><li><p>服务器：容器名<code>server-order1</code>，端口<code>3311</code></p></li></ul><h3 id="1-1、创建server-order0容器"><a href="#1-1、创建server-order0容器" class="headerlink" title="1.1、创建server-order0容器"></a>1.1、创建server-order0容器</h3><ul><li><p><strong>step1：创建容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3310:3306 \<br>-v /atguigu/server/order0/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order0/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order0 \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure></li><li><p><strong>step2：登录MySQL服务器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order0 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><strong>step3：创建数据库：</strong><br><code>注意：</code>水平分片的id需要在业务层实现，<code>不能依赖数据库的主键自增</code></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order0 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order1 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure></li></ul><h3 id="1-2、创建server-order1容器"><a href="#1-2、创建server-order1容器" class="headerlink" title="1.2、创建server-order1容器"></a>1.2、创建server-order1容器</h3><ul><li><p><strong>step1：创建容器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-p 3311:3306 \<br>-v /atguigu/server/order1/conf:/etc/mysql/conf.d \<br>-v /atguigu/server/order1/data:/var/lib/mysql \<br>-e MYSQL_ROOT_PASSWORD=123456 \<br>--name server-order1 \<br>mysql:8.0.29<br></code></pre></td></tr></table></figure></li><li><p><strong>step2：登录MySQL服务器：</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器：</span><br>docker exec -it server-order1 env LANG=C.UTF-8 /bin/bash<br><span class="hljs-meta prompt_">#</span><span class="language-bash">进入容器内的mysql命令行</span><br>mysql -uroot -p<br><span class="hljs-meta prompt_">#</span><span class="language-bash">修改默认密码插件</span><br>ALTER USER &#x27;root&#x27;@&#x27;%&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;123456&#x27;;<br></code></pre></td></tr></table></figure></li><li><p><strong>step3：创建数据库：</strong>和server-order0相同<br><code>注意：</code>水平分片的id需要在业务层实现，不能依赖数据库的主键自增</p></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> DATABASE db_order;<br>USE db_order;<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order0 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order1 (<br>  id <span class="hljs-type">BIGINT</span>,<br>  order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>  user_id <span class="hljs-type">BIGINT</span>,<br>  amount <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>  <span class="hljs-keyword">PRIMARY</span> KEY(id) <br>);<br></code></pre></td></tr></table></figure><h2 id="2、基本水平分片"><a href="#2、基本水平分片" class="headerlink" title="2、基本水平分片"></a>2、基本水平分片</h2><h3 id="2-1、基本配置"><a href="#2-1、基本配置" class="headerlink" title="2.1、基本配置"></a>2.1、基本配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#========================基本配置</span><br><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">sharging-jdbc-demo</span><br><span class="hljs-comment"># 开发环境设置</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"># 内存模式</span><br><span class="hljs-attr">spring.shardingsphere.mode.type</span>=<span class="hljs-string">Memory</span><br><span class="hljs-comment"># 打印SQl</span><br><span class="hljs-attr">spring.shardingsphere.props.sql-show</span>=<span class="hljs-string">true</span><br></code></pre></td></tr></table></figure><h3 id="2-2、数据源配置"><a href="#2-2、数据源配置" class="headerlink" title="2.2、数据源配置"></a>2.2、数据源配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#========================数据源配置</span><br><span class="hljs-comment"># 配置真实数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.names</span>=<span class="hljs-string">server-user,server-order0,server-order1</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 1 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3301/db_user</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-user.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 2 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3310/db_order</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="hljs-string">123456</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 配置第 3 个数据源</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.type</span>=<span class="hljs-string">com.zaxxer.hikari.HikariDataSource</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.jdbc-url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3311/db_order</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.shardingsphere.datasource.server-order.password</span>=<span class="hljs-string">123456</span><br></code></pre></td></tr></table></figure><h3 id="2-3、标椎分片表配置"><a href="#2-3、标椎分片表配置" class="headerlink" title="2.3、标椎分片表配置"></a>2.3、标椎分片表配置</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#========================标准分片表配置（数据节点配置）</span><br><span class="hljs-comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span><br><span class="hljs-comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span><br><span class="hljs-comment"># &lt;table-name&gt;：逻辑表名</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="hljs-string">server-user.t_user</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="hljs-string">server-order0.t_order0,server-order0.t_order1,server-order1.t_order0,server-order1.t_order1</span><br></code></pre></td></tr></table></figure><p>修改Order实体类的主键策略：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//@TableId(type = IdType.AUTO)//依赖数据库的主键自增策略</span><br><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><span class="hljs-comment">//分布式id</span><br></code></pre></td></tr></table></figure><p>测试：保留上面配置中的一个分片表节点分别进行测试，检查每个分片节点是否可用</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 水平分片：插入数据测试</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrder</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>    order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>);<br>    order.setUserId(<span class="hljs-number">1L</span>);<br>    order.setAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>    orderMapper.insert(order);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-4、行表达式"><a href="#2-4、行表达式" class="headerlink" title="2.4、行表达式"></a>2.4、行表达式</h3><p>优化上一步的分片表配置<br><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/inline-expression/</a></p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#========================标准分片表配置（数据节点配置）</span><br><span class="hljs-comment"># spring.shardingsphere.rules.sharding.tables.&lt;table-name&gt;.actual-data-nodes=值</span><br><span class="hljs-comment"># 值由数据源名 + 表名组成，以小数点分隔。多个表以逗号分隔，支持 inline 表达式。</span><br><span class="hljs-comment"># &lt;table-name&gt;：逻辑表名</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_user.actual-data-nodes</span>=<span class="hljs-string">server-user.t_user</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.actual-data-nodes</span>=<span class="hljs-string">server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span><br></code></pre></td></tr></table></figure><h3 id="2-5、分片算法配置"><a href="#2-5、分片算法配置" class="headerlink" title="2.5、分片算法配置"></a>2.5、分片算法配置</h3><p><strong>水平分库：</strong><br>分片规则：order表中<code>user_id</code>为偶数时，数据插入<code>server-order0服务器</code>，<code>user_id</code>为奇数时，数据插入<code>server-order1服务器</code>。这样分片的好处是，同一个用户的订单数据，一定会被插入到同一台服务器上，查询一个用户的订单时效率较高。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#------------------------分库策略</span><br><span class="hljs-comment"># 分片列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-column</span>=<span class="hljs-string">user_id</span><br><span class="hljs-comment"># 分片算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.database-strategy.standard.sharding-algorithm-name</span>=<span class="hljs-string">alg_inline_userid</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#------------------------分片算法配置</span><br><span class="hljs-comment"># 行表达式分片算法</span><br><span class="hljs-comment"># 分片算法类型</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.type</span>=<span class="hljs-string">INLINE</span><br><span class="hljs-comment"># 分片算法属性配置</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_inline_userid.props.algorithm-expression</span>=<span class="hljs-string">server-order$-&gt;&#123;user_id % 2&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 取模分片算法</span><br><span class="hljs-comment"># 分片算法类型</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.type</span>=<span class="hljs-string">MOD</span><br><span class="hljs-comment"># 分片算法属性配置</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_mod.props.sharding-count</span>=<span class="hljs-string">2</span><br></code></pre></td></tr></table></figure><p>为了方便测试，先设置只在 <code>t_order0</code>表上进行测试</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">xxx.actual-data-nodes</span>=<span class="hljs-string">server-order$-&gt;&#123;0..1&#125;.t_order0</span><br></code></pre></td></tr></table></figure><p>测试：可以分别测试行表达式分片算法和取模分片算法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 水平分片：分库插入数据测试</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderDatabaseStrategy</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">4</span>; i++) &#123;<br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>);<br>        order.setUserId(i + <span class="hljs-number">1</span>);<br>        order.setAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>        orderMapper.insert(order);<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><p><strong>水平分表：</strong><br>分片规则：order表中<code>order_no的哈希值为偶数时</code>，数据插入对应服务器的<code>t_order0表</code>，<code>order_no的哈希值为奇数时</code>，数据插入对应服务器的<code>t_order1表</code>。因为order_no是字符串形式，因此不能直接取模。</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#------------------------分表策略</span><br><span class="hljs-comment"># 分片列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-column</span>=<span class="hljs-string">order_no</span><br><span class="hljs-comment"># 分片算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.table-strategy.standard.sharding-algorithm-name</span>=<span class="hljs-string">alg_hash_mod</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#------------------------分片算法配置</span><br><span class="hljs-comment"># 哈希取模分片算法</span><br><span class="hljs-comment"># 分片算法类型</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.type</span>=<span class="hljs-string">HASH_MOD</span><br><span class="hljs-comment"># 分片算法属性配置</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.sharding-algorithms.alg_hash_mod.props.sharding-count</span>=<span class="hljs-string">2</span><br><br></code></pre></td></tr></table></figure><p>测试前不要忘记将如下节点改回原来的状态</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-attr">xxx.actual-data-nodes</span>=<span class="hljs-string">server-order$-&gt;&#123;0..1&#125;.t_order$-&gt;&#123;0..1&#125;</span><br></code></pre></td></tr></table></figure><p>测试：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 水平分片：分表插入数据测试</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderTableStrategy</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">5</span>; i++) &#123;<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>        order.setUserId(<span class="hljs-number">1L</span>);<br>        order.setAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>        orderMapper.insert(order);<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; i &lt; <span class="hljs-number">9</span>; i++) &#123;<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>        order.setUserId(<span class="hljs-number">2L</span>);<br>        order.setAmount(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">100</span>));<br>        orderMapper.insert(order);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试哈希取模</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testHash</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-comment">//注意hash取模的结果是整个字符串hash后再取模，和数值后缀是奇数还是偶数无关</span><br>    System.out.println(<span class="hljs-string">&quot;ATGUIGU001&quot;</span>.hashCode() % <span class="hljs-number">2</span>);<br>    System.out.println(<span class="hljs-string">&quot;ATGUIGU0011&quot;</span>.hashCode() % <span class="hljs-number">2</span>);<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>查询测试：</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 水平分片：查询所有记录</span><br><span class="hljs-comment">     * 查询了两个数据源，每个数据源中使用UNION ALL连接两个表</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShardingSelectAll</span><span class="hljs-params">()</span>&#123;<br><br>    List&lt;Order&gt; orders = orderMapper.selectList(<span class="hljs-literal">null</span>);<br>    orders.forEach(System.out::println);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 水平分片：根据user_id查询记录</span><br><span class="hljs-comment">     * 查询了一个数据源，每个数据源中使用UNION ALL连接两个表</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testShardingSelectByUserId</span><span class="hljs-params">()</span>&#123;<br><br>    QueryWrapper&lt;Order&gt; orderQueryWrapper = <span class="hljs-keyword">new</span> <span class="hljs-title class_">QueryWrapper</span>&lt;&gt;();<br>    orderQueryWrapper.eq(<span class="hljs-string">&quot;user_id&quot;</span>, <span class="hljs-number">1L</span>);<br>    List&lt;Order&gt; orders = orderMapper.selectList(orderQueryWrapper);<br>    orders.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="2-6、分布式序列算法"><a href="#2-6、分布式序列算法" class="headerlink" title="2.6、分布式序列算法"></a>2.6、分布式序列算法</h3><p><strong>雪花算法：</strong></p><p><a href="https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/">https://shardingsphere.apache.org/document/5.1.1/cn/features/sharding/concept/key-generator/</a></p><p>水平分片需要关注全局序列，因为不能简单的使用基于数据库的主键自增。</p><p>这里有两种方案：一种是基于MyBatisPlus的id策略；一种是ShardingSphere-JDBC的全局序列配置。</p><p><code>基于MyBatisPlus的id策略：</code>将Order类的id设置成如下形式</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br><span class="hljs-keyword">private</span> Long id;<br></code></pre></td></tr></table></figure><p><code>基于ShardingSphere-JDBC的全局序列配置</code>：和前面的MyBatisPlus的策略二选一</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#------------------------分布式序列策略配置</span><br><span class="hljs-comment"># 分布式序列列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.column</span>=<span class="hljs-string">id</span><br><span class="hljs-comment"># 分布式序列算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order.key-generate-strategy.key-generator-name</span>=<span class="hljs-string">alg_snowflake</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 分布式序列算法配置</span><br><span class="hljs-comment"># 分布式序列算法类型</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.type</span>=<span class="hljs-string">SNOWFLAKE</span><br><span class="hljs-comment"># 分布式序列算法属性配置</span><br><span class="hljs-comment">#spring.shardingsphere.rules.sharding.key-generators.alg_snowflake.props.xxx=</span><br></code></pre></td></tr></table></figure><p>此时，需要将实体类中的id策略修改成以下形式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span><br><span class="hljs-comment">//当没有配置shardingsphere-jdbc的分布式序列时，自动依赖数据库的主键自增策略</span><br><span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br></code></pre></td></tr></table></figure><h2 id="3、多表关联"><a href="#3、多表关联" class="headerlink" title="3、多表关联"></a>3、多表关联</h2><h3 id="3-1、创建关联表"><a href="#3-1、创建关联表" class="headerlink" title="3.1、创建关联表"></a>3.1、创建关联表</h3><p>在<code>server-order0、server-order1</code>服务器中分别创建两张订单详情表<code>t_order_item0、t_order_item1</code></p><p>我们希望<code>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</code>，因此这两张表我们使用相同的分片策略。</p><p>那么在<code>t_order_item</code>中我们也需要创建<code>order_no</code>和<code>user_id</code>这两个分片键</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order_item0(<br>    id <span class="hljs-type">BIGINT</span>,<br>    order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    user_id <span class="hljs-type">BIGINT</span>,<br>    price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    `count` <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br><br><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_order_item1(<br>    id <span class="hljs-type">BIGINT</span>,<br>    order_no <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">30</span>),<br>    user_id <span class="hljs-type">BIGINT</span>,<br>    price <span class="hljs-type">DECIMAL</span>(<span class="hljs-number">10</span>,<span class="hljs-number">2</span>),<br>    `count` <span class="hljs-type">INT</span>,<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br></code></pre></td></tr></table></figure><h3 id="3-2、创建实体类"><a href="#3-2、创建实体类" class="headerlink" title="3.2、创建实体类"></a>3.2、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_order_item&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderItem</span> &#123;<br>    <span class="hljs-comment">//当配置了shardingsphere-jdbc的分布式序列时，自动使用shardingsphere-jdbc的分布式序列</span><br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-keyword">private</span> Long userId;<br>    <span class="hljs-keyword">private</span> BigDecimal price;<br>    <span class="hljs-keyword">private</span> Integer count;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-3、创建Mapper"><a href="#3-3、创建Mapper" class="headerlink" title="3.3、创建Mapper"></a>3.3、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shargingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderItemMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;OrderItem&gt; &#123;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="3-4、配置关联表"><a href="#3-4、配置关联表" class="headerlink" title="3.4、配置关联表"></a>3.4、配置关联表</h3><p>t_order_item的分片表、分片策略、分布式序列策略和t_order一致</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#------------------------标准分片表配置（数据节点配置）</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.actual-data-nodes</span>=<span class="hljs-string">server-order$-&gt;&#123;0..1&#125;.t_order_item$-&gt;&#123;0..1&#125;</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#------------------------分库策略</span><br><span class="hljs-comment"># 分片列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-column</span>=<span class="hljs-string">user_id</span><br><span class="hljs-comment"># 分片算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.database-strategy.standard.sharding-algorithm-name</span>=<span class="hljs-string">alg_mod</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#------------------------分表策略</span><br><span class="hljs-comment"># 分片列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-column</span>=<span class="hljs-string">order_no</span><br><span class="hljs-comment"># 分片算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.table-strategy.standard.sharding-algorithm-name</span>=<span class="hljs-string">alg_hash_mod</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#------------------------分布式序列策略配置</span><br><span class="hljs-comment"># 分布式序列列名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.column</span>=<span class="hljs-string">id</span><br><span class="hljs-comment"># 分布式序列算法名称</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_order_item.key-generate-strategy.key-generator-name</span>=<span class="hljs-string">alg_snowflake</span><br></code></pre></td></tr></table></figure><h3 id="3-5、测试插入数据"><a href="#3-5、测试插入数据" class="headerlink" title="3.5、测试插入数据"></a>3.5、测试插入数据</h3><p>同一个用户的订单表和订单详情表中的数据都在同一个数据源中，避免跨库关联</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试关联表插入</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testInsertOrderAndOrderItem</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>        order.setUserId(<span class="hljs-number">1L</span>);<br>        orderMapper.insert(order);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>            <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>            orderItem.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>            orderItem.setUserId(<span class="hljs-number">1L</span>);<br>            orderItem.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">10</span>));<br>            orderItem.setCount(<span class="hljs-number">2</span>);<br>            orderItemMapper.insert(orderItem);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">5</span>; i &lt; <span class="hljs-number">7</span>; i++) &#123;<br><br>        <span class="hljs-type">Order</span> <span class="hljs-variable">order</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Order</span>();<br>        order.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>        order.setUserId(<span class="hljs-number">2L</span>);<br>        orderMapper.insert(order);<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">long</span> <span class="hljs-variable">j</span> <span class="hljs-operator">=</span> <span class="hljs-number">1</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>            <span class="hljs-type">OrderItem</span> <span class="hljs-variable">orderItem</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">OrderItem</span>();<br>            orderItem.setOrderNo(<span class="hljs-string">&quot;ATGUIGU&quot;</span> + i);<br>            orderItem.setUserId(<span class="hljs-number">2L</span>);<br>            orderItem.setPrice(<span class="hljs-keyword">new</span> <span class="hljs-title class_">BigDecimal</span>(<span class="hljs-number">1</span>));<br>            orderItem.setCount(<span class="hljs-number">3</span>);<br>            orderItemMapper.insert(orderItem);<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></td></tr></table></figure><h2 id="4、绑定表"><a href="#4、绑定表" class="headerlink" title="4、绑定表"></a>4、绑定表</h2><p><strong>需求：</strong>查询每个订单的订单号和总订单金额</p><h3 id="4-1、创建VO对象"><a href="#4-1、创建VO对象" class="headerlink" title="4.1、创建VO对象"></a>4.1、创建VO对象</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">OrderVo</span> &#123;<br>    <span class="hljs-keyword">private</span> String orderNo;<br>    <span class="hljs-keyword">private</span> BigDecimal amount;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-2、添加Mapper方法"><a href="#4-2、添加Mapper方法" class="headerlink" title="4.2、添加Mapper方法"></a>4.2、添加Mapper方法</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">OrderMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Order&gt; &#123;<br><br>    <span class="hljs-meta">@Select(&#123;&quot;SELECT o.order_no, SUM(i.price * i.count) AS amount&quot;,</span><br><span class="hljs-meta">            &quot;FROM t_order o JOIN t_order_item i ON o.order_no = i.order_no&quot;,</span><br><span class="hljs-meta">            &quot;GROUP BY o.order_no&quot;&#125;)</span><br>    List&lt;OrderVo&gt; <span class="hljs-title function_">getOrderAmount</span><span class="hljs-params">()</span>;<br><br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-3、测试关联查询"><a href="#4-3、测试关联查询" class="headerlink" title="4.3、测试关联查询"></a>4.3、测试关联查询</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 测试关联表查询</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testGetOrderAmount</span><span class="hljs-params">()</span>&#123;<br><br>    List&lt;OrderVo&gt; orderAmountList = orderMapper.getOrderAmount();<br>    orderAmountList.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-4、配置绑定表"><a href="#4-4、配置绑定表" class="headerlink" title="4.4、配置绑定表"></a>4.4、配置绑定表</h3><p>在原来水平分片配置的基础上添加如下配置：</p><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#------------------------绑定表</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.binding-tables[0]</span>=<span class="hljs-string">t_order,t_order_item</span><br></code></pre></td></tr></table></figure><p>配置完绑定表后再次进行关联查询的测试：</p><ul><li><p><strong>如果不配置绑定表：测试的结果为8个SQL。</strong>多表关联查询会出现笛卡尔积关联。</p></li><li><p><strong>如果配置绑定表：测试的结果为4个SQL。</strong> 多表关联查询不会出现笛卡尔积关联，关联查询效率将大大提升。</p></li></ul><p><code>绑定表：</code>指分片规则一致的一组分片表。 使用绑定表进行多表关联查询时，必须使用分片键进行关联，否则会出现笛卡尔积关联或跨库关联，从而影响查询效率。</p><h2 id="5、广播表"><a href="#5、广播表" class="headerlink" title="5、广播表"></a>5、广播表</h2><h3 id="4-1、什么是广播表"><a href="#4-1、什么是广播表" class="headerlink" title="4.1、什么是广播表"></a>4.1、什么是广播表</h3><p>指所有的分片数据源中都存在的表，表结构及其数据在每个数据库中均完全一致。 适用于数据量不大且需要与海量数据的表进行关联查询的场景，例如：字典表。<br>广播具有以下特性：<br>（1）插入、更新操作会实时在所有节点上执行，保持各个分片的数据一致性</p><p>（2）查询操作，只从一个节点获取</p><p>（3）可以跟任何一个表进行 JOIN 操作</p><h3 id="4-2、创建广播表"><a href="#4-2、创建广播表" class="headerlink" title="4.2、创建广播表"></a>4.2、创建广播表</h3><p>在server-order0、server-order1和server-user服务器中分别创建t_dict表</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> t_dict(<br>    id <span class="hljs-type">BIGINT</span>,<br>    dict_type <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">200</span>),<br>    <span class="hljs-keyword">PRIMARY</span> KEY(id)<br>);<br></code></pre></td></tr></table></figure><h3 id="4-3、程序实现"><a href="#4-3、程序实现" class="headerlink" title="4.3、程序实现"></a>4.3、程序实现</h3><h4 id="4-3-1、创建实体类"><a href="#4-3-1、创建实体类" class="headerlink" title="4.3.1、创建实体类"></a>4.3.1、创建实体类</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_dict&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Dict</span> &#123;<br>    <span class="hljs-comment">//可以使用MyBatisPlus的雪花算法</span><br>    <span class="hljs-meta">@TableId(type = IdType.ASSIGN_ID)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String dictType;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-2、创建Mapper"><a href="#4-3-2、创建Mapper" class="headerlink" title="4.3.2、创建Mapper"></a>4.3.2、创建Mapper</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingjdbcdemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">DictMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;Dict&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h4 id="4-3-3、配置广播表"><a href="#4-3-3、配置广播表" class="headerlink" title="4.3.3、配置广播表"></a>4.3.3、配置广播表</h4><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment">#数据节点可不配置，默认情况下，向所有数据源广播</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.tables.t_dict.actual-data-nodes</span>=<span class="hljs-string">server-user.t_dict,server-order$-&gt;&#123;0..1&#125;.t_dict</span><br><span class="hljs-comment"></span><br><span class="hljs-comment"># 广播表</span><br><span class="hljs-attr">spring.shardingsphere.rules.sharding.broadcast-tables[0]</span>=<span class="hljs-string">t_dict</span><br></code></pre></td></tr></table></figure><h3 id="4-4、测试广播表"><a href="#4-4、测试广播表" class="headerlink" title="4.4、测试广播表"></a>4.4、测试广播表</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-meta">@Autowired</span><br><span class="hljs-keyword">private</span> DictMapper dictMapper;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 广播表：每个服务器中的t_dict同时添加了新数据</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testBroadcast</span><span class="hljs-params">()</span>&#123;<br><br>    <span class="hljs-type">Dict</span> <span class="hljs-variable">dict</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Dict</span>();<br>    dict.setDictType(<span class="hljs-string">&quot;type1&quot;</span>);<br>    dictMapper.insert(dict);<br>&#125;<br><br><span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 查询操作，只从一个节点获取数据</span><br><span class="hljs-comment">     * 随机负载均衡规则</span><br><span class="hljs-comment">     */</span><br><span class="hljs-meta">@Test</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectBroadcast</span><span class="hljs-params">()</span>&#123;<br><br>    List&lt;Dict&gt; dicts = dictMapper.selectList(<span class="hljs-literal">null</span>);<br>    dicts.forEach(System.out::println);<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第07章-启动ShardingSphere-Proxy"><a href="#第07章-启动ShardingSphere-Proxy" class="headerlink" title="第07章 启动ShardingSphere-Proxy"></a>第07章 启动ShardingSphere-Proxy</h1><h2 id="1、获取"><a href="#1、获取" class="headerlink" title="1、获取"></a>1、获取</h2><p>目前 ShardingSphere-Proxy 提供了 3 种获取方式：</p><ul><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/bin/">二进制发布包</a></li><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/docker/">Docker</a></li><li><a href="https://shardingsphere.apache.org/document/5.1.1/cn/user-manual/shardingsphere-proxy/startup/helm/">Helm</a></li></ul><h2 id="2、使用二进制发布包安装"><a href="#2、使用二进制发布包安装" class="headerlink" title="2、使用二进制发布包安装"></a>2、使用二进制发布包安装</h2><p>二进制包既可以Linux系统运行，又可以在windows系统运行</p><p><strong>step1：解压二进制包</strong></p><p><code>apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz</code></p><p>windows：使用解压软件解压文件</p><p>Linux：将文件上传至&#x2F;opt目录，并解压</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">tar -zxvf apache-shardingsphere-5.1.1-shardingsphere-proxy-bin.tar.gz<br></code></pre></td></tr></table></figure><p><strong>step2：MySQL驱动</strong></p><p><code>mysql-connector-java-8.0.22.jar</code></p><p>将MySQl驱动放至解压目录中的<code>ext-lib</code>目录</p><p><strong>step3：修改配置conf&#x2F;server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!AUTHORITY</span><br>    <span class="hljs-attr">users:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">root@%:root</span><br>    <span class="hljs-attr">provider:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">ALL_PRIVILEGES_PERMITTED</span><br><br><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p><strong>step4：启动ShardingSphere-Proxy</strong></p><p>Linux 操作系统请运行 <code>bin/start.sh</code></p><p>Windows 操作系统请运行 <code>bin/start.bat</code> </p><p>指定端口号和配置文件目录：<code>bin/start.bat $&#123;proxy_port&#125; $&#123;proxy_conf_directory&#125;</code> </p><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -h192.168.100.1 -P3307 -uroot -p<br></code></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p><img src="image-20220819152009158.png" alt="image-20220819152009158"></p><h2 id="3、使用Docker安装"><a href="#3、使用Docker安装" class="headerlink" title="3、使用Docker安装"></a>3、使用Docker安装</h2><p><strong>step1：启动Docker容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker run -d \<br>-v /atguigu/server/proxy-a/conf:/opt/shardingsphere-proxy/conf \<br>-v /atguigu/server/proxy-a/ext-lib:/opt/shardingsphere-proxy/ext-lib \<br>-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot; \<br>-p 3321:3307 \<br>--name server-proxy-a \<br>apache/shardingsphere-proxy:5.1.1<br></code></pre></td></tr></table></figure><p><strong>step2：上传MySQL驱动</strong></p><p>将MySQl驱动上传至<code>/atguigu/server/proxy-a/ext-lib</code>目录</p><p><strong>step3：修改配置server.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">rules:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-type">!AUTHORITY</span><br>    <span class="hljs-attr">users:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-string">root@%:root</span><br>    <span class="hljs-attr">provider:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">ALL_PRIVILEGES_PERMITTED</span><br><br><span class="hljs-attr">props:</span><br>  <span class="hljs-attr">sql-show:</span> <span class="hljs-literal">true</span><br></code></pre></td></tr></table></figure><p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p><p><strong>step4：重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart server-proxy-a<br></code></pre></td></tr></table></figure><p><strong>step5：远程连接ShardingSphere-Proxy</strong></p><p>ShardingSphere-Proxy容器中默认情况下没有mysql命令行客户端的安装，因此需要远程访问</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">mysql -h192.168.100.201 -P3321 -uroot -p<br></code></pre></td></tr></table></figure><p><strong>step6：访问测试</strong></p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">show</span> databases;<br></code></pre></td></tr></table></figure><p><img src="image-20220819152009158.png" alt="image-20220819152009158"></p><p><strong>常见问题：docker容器无法远程连接</strong></p><p>容器可以成功的创建并启动，但是无法远程连接。排除防火墙和网络等问题后，看看是不是因为容器内存不足导致。</p><p><code>原因：</code>容器可分配内存不足</p><p><code>查看办法：</code>进入容器后查看ShardingSphere-Proxy的日志，如有有<code>cannot allocate memory</code>，则说明容器内存不足</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash<br>cd /opt/shardingsphere-proxy/logs<br>tail stdout.log <br></code></pre></td></tr></table></figure><p><img src="image-20220819151154763.png" alt="image-20220819151154763"></p><p><code>解决方案：</code>创建容器的时候使用JVM参数</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">-e ES_JAVA_OPTS=&quot;-Xmx256m -Xms256m -Xmn128m&quot;<br></code></pre></td></tr></table></figure><h1 id="第08章-ShardingSphere-Proxy读写分离"><a href="#第08章-ShardingSphere-Proxy读写分离" class="headerlink" title="第08章 ShardingSphere-Proxy读写分离"></a>第08章 ShardingSphere-Proxy读写分离</h1><h2 id="1、修改配置文件"><a href="#1、修改配置文件" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-readwrite-splitting.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">schemaName:</span> <span class="hljs-string">readwrite_splitting_db</span><br><br><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">write_ds:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3306/db_user?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">read_ds_0:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3307/db_user?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">read_ds_1:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3308/db_user?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-type">!READWRITE_SPLITTING</span><br>  <span class="hljs-attr">dataSources:</span><br>    <span class="hljs-attr">readwrite_ds:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">Static</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">write-data-source-name:</span> <span class="hljs-string">write_ds</span><br>        <span class="hljs-attr">read-data-source-names:</span> <span class="hljs-string">read_ds_0,read_ds_1</span><br></code></pre></td></tr></table></figure><p>将配置文件上传至<code>/atguigu/server/proxy-a/conf</code>目录</p><p><strong>重启容器</strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker restart server-proxy-a<br></code></pre></td></tr></table></figure><h2 id="2、实时查看日志"><a href="#2、实时查看日志" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash<br>tail -f /opt/shardingsphere-proxy/logs/stdout.log <br></code></pre></td></tr></table></figure><h2 id="3、远程访问测试"><a href="#3、远程访问测试" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br>mysql<span class="hljs-operator">&gt;</span> use readwrite_splitting_db;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> tables;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">insert</span> <span class="hljs-keyword">into</span> t_user(uname) <span class="hljs-keyword">values</span>(<span class="hljs-string">&#x27;wang5&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="4、应用程序访问Proxy"><a href="#4、应用程序访问Proxy" class="headerlink" title="4、应用程序访问Proxy"></a>4、应用程序访问Proxy</h2><h3 id="4-1、创建项目"><a href="#4-1、创建项目" class="headerlink" title="4.1、创建项目"></a>4.1、创建项目</h3><p>项目类型：Spring Initializr</p><p>SpringBoot脚手架：<a href="http://start.aliyun.com/">http://start.aliyun.com</a></p><p>项目名：sharding-proxy-demo</p><p>SpringBoot版本：2.3.7.RELEASE</p><h3 id="4-2、添加依赖"><a href="#4-2、添加依赖" class="headerlink" title="4.2、添加依赖"></a>4.2、添加依赖</h3><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">dependencies</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>com.baomidou<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>3.3.1<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">optional</span>&gt;</span>true<span class="hljs-tag">&lt;/<span class="hljs-name">optional</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><br>    <span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">exclusions</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">exclusion</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.junit.vintage<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit-vintage-engine<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">exclusion</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">exclusions</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependencies</span>&gt;</span><br></code></pre></td></tr></table></figure><h3 id="4-3、创建实体类"><a href="#4-3、创建实体类" class="headerlink" title="4.3、创建实体类"></a>4.3、创建实体类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingproxydemo.entity;<br><br><span class="hljs-meta">@TableName(&quot;t_user&quot;)</span><br><span class="hljs-meta">@Data</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">User</span> &#123;<br>    <span class="hljs-meta">@TableId(type = IdType.AUTO)</span><br>    <span class="hljs-keyword">private</span> Long id;<br>    <span class="hljs-keyword">private</span> String uname;<br>&#125;<br><br></code></pre></td></tr></table></figure><h3 id="4-4、创建Mapper"><a href="#4-4、创建Mapper" class="headerlink" title="4.4、创建Mapper"></a>4.4、创建Mapper</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingproxydemo.mapper;<br><br><span class="hljs-meta">@Mapper</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">interface</span> <span class="hljs-title class_">UserMapper</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">BaseMapper</span>&lt;User&gt; &#123;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="4-5、配置数据源"><a href="#4-5、配置数据源" class="headerlink" title="4.5、配置数据源"></a>4.5、配置数据源</h3><figure class="highlight properties"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs properties"><span class="hljs-comment"># 应用名称</span><br><span class="hljs-attr">spring.application.name</span>=<span class="hljs-string">sharding-proxy-demo</span><br><span class="hljs-comment"># 开发环境设置</span><br><span class="hljs-attr">spring.profiles.active</span>=<span class="hljs-string">dev</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mysql数据库连接（proxy）</span><br><span class="hljs-attr">spring.datasource.driver-class-name</span>=<span class="hljs-string">com.mysql.jdbc.Driver</span><br><span class="hljs-attr">spring.datasource.url</span>=<span class="hljs-string">jdbc:mysql://192.168.100.201:3321/readwrite_splitting_db?serverTimezone=GMT%2B8&amp;useSSL=false</span><br><span class="hljs-attr">spring.datasource.username</span>=<span class="hljs-string">root</span><br><span class="hljs-attr">spring.datasource.password</span>=<span class="hljs-string">root</span><br><span class="hljs-comment"></span><br><span class="hljs-comment">#mybatis日志</span><br><span class="hljs-attr">mybatis-plus.configuration.log-impl</span>=<span class="hljs-string">org.apache.ibatis.logging.stdout.StdOutImpl</span><br></code></pre></td></tr></table></figure><h3 id="4-6、测试"><a href="#4-6、测试" class="headerlink" title="4.6、测试"></a>4.6、测试</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.atguigu.shardingproxydemo;<br><br><span class="hljs-meta">@SpringBootTest</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">ShardingProxyDemoApplicationTests</span> &#123;<br><br>    <span class="hljs-meta">@Autowired</span><br>    <span class="hljs-keyword">private</span> UserMapper userMapper;<br><br>    <span class="hljs-comment">/**</span><br><span class="hljs-comment">     * 读数据测试</span><br><span class="hljs-comment">     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">testSelectAll</span><span class="hljs-params">()</span>&#123;<br>        List&lt;User&gt; users = userMapper.selectList(<span class="hljs-literal">null</span>);<br>        users.forEach(System.out::println);<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h1 id="第09章-ShardingSphere-Proxy垂直分片"><a href="#第09章-ShardingSphere-Proxy垂直分片" class="headerlink" title="第09章 ShardingSphere-Proxy垂直分片"></a>第09章 ShardingSphere-Proxy垂直分片</h1><h2 id="1、修改配置文件-1"><a href="#1、修改配置文件-1" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-sharding.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">schemaName:</span> <span class="hljs-string">sharding_db</span><br><br><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">ds_0:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">ds_1:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3302/db_order?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>  <span class="hljs-attr">tables:</span><br>    <span class="hljs-attr">t_user:</span><br>      <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds_0.t_user</span><br>    <span class="hljs-attr">t_order:</span><br>      <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds_1.t_order</span><br></code></pre></td></tr></table></figure><h2 id="2、实时查看日志-1"><a href="#2、实时查看日志-1" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash<br>tail -f /opt/shardingsphere-proxy/logs/stdout.log <br></code></pre></td></tr></table></figure><h2 id="3、远程访问测试-1"><a href="#3、远程访问测试-1" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br>mysql<span class="hljs-operator">&gt;</span> use sharding_db;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> tables;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_order;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_user;<br></code></pre></td></tr></table></figure><h1 id="第10章-ShardingSphere-Proxy水平分片"><a href="#第10章-ShardingSphere-Proxy水平分片" class="headerlink" title="第10章 ShardingSphere-Proxy水平分片"></a>第10章 ShardingSphere-Proxy水平分片</h1><h2 id="1、修改配置文件-2"><a href="#1、修改配置文件-2" class="headerlink" title="1、修改配置文件"></a>1、修改配置文件</h2><p><strong>修改配置config-sharding.yaml</strong></p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-attr">schemaName:</span> <span class="hljs-string">sharding_db</span><br><br><span class="hljs-attr">dataSources:</span><br>  <span class="hljs-attr">ds_user:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3301/db_user?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">ds_order0:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3310/db_order?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">ds_order1:</span><br>    <span class="hljs-attr">url:</span> <span class="hljs-string">jdbc:mysql://192.168.100.201:3311/db_order?serverTimezone=UTC&amp;useSSL=false</span><br>    <span class="hljs-attr">username:</span> <span class="hljs-string">root</span><br>    <span class="hljs-attr">password:</span> <span class="hljs-number">123456</span><br>    <span class="hljs-attr">connectionTimeoutMilliseconds:</span> <span class="hljs-number">30000</span><br>    <span class="hljs-attr">idleTimeoutMilliseconds:</span> <span class="hljs-number">60000</span><br>    <span class="hljs-attr">maxLifetimeMilliseconds:</span> <span class="hljs-number">1800000</span><br>    <span class="hljs-attr">maxPoolSize:</span> <span class="hljs-number">50</span><br>    <span class="hljs-attr">minPoolSize:</span> <span class="hljs-number">1</span><br><br><span class="hljs-attr">rules:</span><br><span class="hljs-bullet">-</span> <span class="hljs-type">!SHARDING</span><br>  <span class="hljs-attr">tables:</span><br>    <span class="hljs-attr">t_user:</span><br>      <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds_user.t_user</span><br><br>    <span class="hljs-attr">t_order:</span><br>      <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds_order$&#123;0..1&#125;.t_order$&#123;0..1&#125;</span><br>      <span class="hljs-attr">databaseStrategy:</span><br>        <span class="hljs-attr">standard:</span><br>          <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">user_id</span><br>          <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">alg_mod</span><br>      <span class="hljs-attr">tableStrategy:</span><br>        <span class="hljs-attr">standard:</span><br>          <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">order_no</span><br>          <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">alg_hash_mod</span><br>      <span class="hljs-attr">keyGenerateStrategy:</span><br>        <span class="hljs-attr">column:</span> <span class="hljs-string">id</span><br>        <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">snowflake</span><br>    <span class="hljs-attr">t_order_item:</span><br>      <span class="hljs-attr">actualDataNodes:</span> <span class="hljs-string">ds_order$&#123;0..1&#125;.t_order_item$&#123;0..1&#125;</span><br>      <span class="hljs-attr">databaseStrategy:</span><br>        <span class="hljs-attr">standard:</span><br>          <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">user_id</span><br>          <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">alg_mod</span><br>      <span class="hljs-attr">tableStrategy:</span><br>        <span class="hljs-attr">standard:</span><br>          <span class="hljs-attr">shardingColumn:</span> <span class="hljs-string">order_no</span><br>          <span class="hljs-attr">shardingAlgorithmName:</span> <span class="hljs-string">alg_hash_mod</span><br>      <span class="hljs-attr">keyGenerateStrategy:</span><br>        <span class="hljs-attr">column:</span> <span class="hljs-string">id</span><br>        <span class="hljs-attr">keyGeneratorName:</span> <span class="hljs-string">snowflake</span><br><br>  <span class="hljs-attr">bindingTables:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">t_order,t_order_item</span><br><br><br>  <span class="hljs-attr">broadcastTables:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-string">t_dict</span><br><br>  <span class="hljs-attr">shardingAlgorithms:</span><br>    <span class="hljs-attr">alg_inline_userid:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">INLINE</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">algorithm-expression:</span> <span class="hljs-string">server-order$-&gt;&#123;user_id</span> <span class="hljs-string">%</span> <span class="hljs-number">2</span><span class="hljs-string">&#125;</span><br>    <span class="hljs-attr">alg_mod:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">MOD</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">sharding-count:</span> <span class="hljs-number">2</span><br>    <span class="hljs-attr">alg_hash_mod:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">HASH_MOD</span><br>      <span class="hljs-attr">props:</span><br>        <span class="hljs-attr">sharding-count:</span> <span class="hljs-number">2</span><br>  <br>  <span class="hljs-attr">keyGenerators:</span><br>    <span class="hljs-attr">snowflake:</span><br>      <span class="hljs-attr">type:</span> <span class="hljs-string">SNOWFLAKE</span><br><br></code></pre></td></tr></table></figure><h2 id="2、实时查看日志-2"><a href="#2、实时查看日志-2" class="headerlink" title="2、实时查看日志"></a>2、实时查看日志</h2><p>可以通过这种方式查看服务器中输出的SQL语句</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs shell">docker exec -it server-proxy-a env LANG=C.UTF-8 /bin/bash<br>tail -f /opt/shardingsphere-proxy/logs/stdout.log <br></code></pre></td></tr></table></figure><h2 id="3、远程访问测试-2"><a href="#3、远程访问测试-2" class="headerlink" title="3、远程访问测试"></a>3、远程访问测试</h2><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql">mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> databases;<br>mysql<span class="hljs-operator">&gt;</span> use sharding_db;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">show</span> tables;<br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_order; <span class="hljs-comment">--测试水平分片</span><br>mysql<span class="hljs-operator">&gt;</span> <span class="hljs-keyword">select</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">from</span> t_dict; <span class="hljs-comment">--测试广播表</span><br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/JVM/"/>
    <url>/2023/11/17/JVM/</url>
    
    <content type="html"><![CDATA[<h4 id="类加载器子系统的作用"><a href="#类加载器子系统的作用" class="headerlink" title="类加载器子系统的作用"></a>类加载器子系统的作用</h4><ul><li>类加载器子系统负责从文件系统或者文件中心加载Class文件，class文件在文件开头有特定的文件标识。</li><li>ClassLoader只负责class文件的加载，至于它是否可以运行，则由Execution Engine决定。加载的类信息存放于一块称为方法区的内存空间。除了类的信息外，方法区中还会存放运行时常量池信息，可能还包括字符串字面量和数字常量（这部分常量信息是Class文件中常量池部分的内存映射）</li></ul>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/JUC/"/>
    <url>/2023/11/17/JUC/</url>
    
    <content type="html"><![CDATA[<p><a href="https://juejin.cn/post/6961307588352802846">https://juejin.cn/post/6961307588352802846</a></p><p>创建多线程的两种方式：1. 继承Thread类，2. 实现runable接口</p><h4 id="2-1-继承Thread类的方式："><a href="#2-1-继承Thread类的方式：" class="headerlink" title="2.1 继承Thread类的方式："></a>2.1 继承Thread类的方式：</h4><ol><li>创建一个继承于Thread类的子类</li><li>重写Thread类的run() –&gt; 将此线程执行的操作声明在run()中</li><li>创建Thread类的子类的对象</li><li>通过此对象调用start()：1. 启动当前线程  2. 调用当前线程的run()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1.继承Thread类</span><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">MyThread</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">MyThread</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-comment">//2.重run方法</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">2</span> == <span class="hljs-number">0</span>) &#123;<br>                System.out.println(i);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">ThreadTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br><span class="hljs-comment">//3.新建Thread对象</span><br>        <span class="hljs-type">MyThread</span> <span class="hljs-variable">myThread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">MyThread</span>();<br>        <span class="hljs-comment">//4.调用start方法</span><br>        myThread.start();<br>    &#125;<br>&#125;<br><br></code></pre></td></tr></table></figure><h4 id="2-2-实现Runnable接口的方式："><a href="#2-2-实现Runnable接口的方式：" class="headerlink" title="2.2  实现Runnable接口的方式："></a>2.2  实现Runnable接口的方式：</h4><ol><li>创建一个实现了Runnable接口的类</li><li>实现类去实现Runnable中的抽象方法：run()</li><li>创建实现类的对象</li><li>将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</li><li>通过Thread类的对象调用start()</li></ol><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-comment">//1. 创建一个实现了Runnable接口的类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">RunnableTest</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-comment">// 2. 实现类去实现Runnable中的抽象方法：run()</span><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-type">int</span> <span class="hljs-variable">i</span> <span class="hljs-operator">=</span> <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            System.out.println(i);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">test</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-comment">//3. 创建实现类的对象</span><br>        <span class="hljs-type">RunnableTest</span> <span class="hljs-variable">runnableTest</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">RunnableTest</span>();<br>        <span class="hljs-comment">//4. 将此对象作为参数传递到Thread类的构造器中，创建Thread类的对象</span><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(runnableTest);<br>        <span class="hljs-comment">//5. 通过Thread类的对象调用start()</span><br>        thread.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>开发中优先选择：实现Runnable接口的方式</strong></p><p><strong>原因：</strong></p><ol><li>实现的方式没类的单继承性的局限性</li><li>实现的方式更适合来处理多个线程共享数据的情况。</li></ol><p><strong>联系：</strong>public class Thread implements Runnable</p><p><strong>相同点：</strong>两种方式都需要重写run(),将线程要执行的逻辑声明在run()中。 目前两种方式，要想启动线程，都是调用的Thread类中的start()。</p><h4 id="2-3-Thread类的常用方法"><a href="#2-3-Thread类的常用方法" class="headerlink" title="2.3 Thread类的常用方法"></a>2.3 Thread类的常用方法</h4><ul><li><p><code>start():</code>启动当前线程；调用当前线程的run()，只有Thread类和他的子类才能调用start()方法</p></li><li><p><code>run():</code> 通常需要重写Thread类中的此方法，将创建的线程要执行的操作声明在此方法中</p></li><li><p><code>currentThread():</code>静态方法，返回执行当前代码的线程</p></li><li><p><code>getName():</code>获取当前线程的名字</p></li><li><p><code>setName():</code>设置当前线程的名字</p></li><li><p><code>yield():</code>释放当前cpu的执行权</p></li><li><p><code>join():</code>在线程a中调用线程b的join(),此时线程a就进入阻塞状态，直到线程b完全执行完以后，线程a才结束阻塞状态。</p></li><li><p><code>stop():</code>已过时。当执行此方法时，强制结束当前线程。</p></li><li><p><code>sleep(long millitime):</code>让当前线程“睡眠”指定的millitime毫秒。在指定的millitime毫秒时间内，当前线程是阻塞状态。</p></li><li><p><code>isAlive():</code>判断当前线程是否存活</p></li></ul><h4 id="2-4-线程的优先级"><a href="#2-4-线程的优先级" class="headerlink" title="2.4 线程的优先级"></a>2.4 线程的优先级</h4><ul><li>MAX_PRIORITY：10</li><li>MIN _PRIORITY：1</li><li>NORM_PRIORITY：5 –&gt;默认优先级</li></ul><p>获取和设置当前线程的优先级：</p><ul><li><code>getPriority():</code>获取线程的优先级</li><li><code>setPriority(int p):</code>设置线程的优先级</li></ul><p>线程通信：wait() &#x2F; notify() &#x2F; notifyAll() :此三个方法定义在Object类中的。</p><h4 id="2-5-线程的分类"><a href="#2-5-线程的分类" class="headerlink" title="2.5 线程的分类"></a>2.5 线程的分类</h4><ul><li>守护线程，如：垃圾回收线程，依赖于主线程而存在</li><li>用户线程，如：main方法的线程</li></ul><h4 id="2-6-Thread生命周期"><a href="#2-6-Thread生命周期" class="headerlink" title="2.6 Thread生命周期"></a>2.6 Thread生命周期</h4><ul><li><p>新建：当一个 Thread类或其子类的对象被声明并创建时，新生的线程对象处于新建状态</p></li><li><p>就绪：处于新建状态的线程被star()后，将进入线程队列等待CPU时间片，此时它已具备了运行的条件，只是没分配到CPU资源</p></li><li><p>运行：当就绪的线程被调度并获得CPU资源时，便进入运行状态，run()方法定义了线程的操作和功能</p></li><li><p>阻塞：在某种特殊情况下，被人为挂起或执行输入输出操作时，让出CP∪并临时中止自己的执行，进入阻塞状态</p></li><li><p>死亡：线程完成了它的全部工作或线程被提前强制性地中止或出现异常导致结束</p></li></ul><p><img src="https://p3-juejin.byteimg.com/tos-cn-i-k3u1fbpfcp/87335f86cc194a089781d888dd4b64b2~tplv-k3u1fbpfcp-zoom-in-crop-mark:1512:0:0:0.awebp" alt="image-20200414132655458"> </p><h4 id="2-7-线程同步"><a href="#2-7-线程同步" class="headerlink" title="2.7  线程同步"></a>2.7  线程同步</h4><p>例子：创建个窗口卖票，总票数为100张.使用实现Runnable接口的方式</p><ul><li>问题：卖票过程中，出现了重票、错票 –&gt;出现了线程的安全问题</li><li>问题出现的原因：当某个线程操作车票的过程中，尚未操作完成时，其他线程参与进来，也操作车票。</li><li>如何解决：当一个线程a在操作ticket的时候，其他线程不能参与进来。直到线程a操作完ticket时，其他线程才可以开始操作ticket。这种情况即使线程a出现了阻塞，也不能被改变。</li></ul><h5 id="2-7-1-同步代码块"><a href="#2-7-1-同步代码块" class="headerlink" title="2.7.1 同步代码块"></a>2.7.1 同步代码块</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">synchronized</span>(同步监视器)&#123;<span class="hljs-comment">//同步监视器就是需要同步线程的公共对象</span><br>   <span class="hljs-comment">//需要被同步的代码</span><br>    <br>&#125;<br></code></pre></td></tr></table></figure><ol><li>操作共享数据的代码，即为需要被同步的代码。 –&gt;不能包含代码多了，也不能包含代码少了。</li><li>共享数据：多个线程共同操作的变量。比如：ticket就是共享数据。</li><li>同步监视器，俗称：锁。任何一个类的对象，都可以充当锁。</li><li>要求多个线程必须要共用同一把锁。</li></ol><ul><li>在实现Runnable接口创建多线程的方式中，我们可以考虑使用this充当同步监视器。</li><li>在继承Thread类创建多线程的方式中，慎用this充当同步监视器，考虑使用当前类充当同步监视器。</li></ul><p><strong>继承Runnable接口形式同步代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tick</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (<span class="hljs-built_in">this</span>) &#123;<br>                <span class="hljs-keyword">if</span> (tick &gt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;号窗口买票，票号为：&quot;</span> + tick--);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br><br>        thread1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        thread2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        thread3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><p><strong>继承Thread类形式同步代码块</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title class_">Thread</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">int</span> <span class="hljs-variable">tick</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-type">Object</span> <span class="hljs-variable">object</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Object</span>();<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-title function_">Ticket2</span><span class="hljs-params">()</span> &#123;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-literal">true</span>) &#123;<br>            <span class="hljs-keyword">synchronized</span> (object) &#123;<br>            <span class="hljs-comment">//synchronized (Ticket2.class) &#123;//通过反射调用当前类</span><br>                <span class="hljs-keyword">if</span> (tick &gt; <span class="hljs-number">0</span>) &#123;<br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;号窗口买票，票号为&quot;</span> + tick--);<br>                &#125; <span class="hljs-keyword">else</span> &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketTest2</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket2</span> <span class="hljs-variable">ticket1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket2</span>();<br>        <span class="hljs-type">Ticket2</span> <span class="hljs-variable">ticket2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket2</span>();<br>        <span class="hljs-type">Ticket2</span> <span class="hljs-variable">ticket3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket2</span>();<br><br>        ticket1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        ticket2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        ticket3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        ticket1.start();<br>        ticket2.start();<br>        ticket3.start();<br><br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-7-2-同步方法"><a href="#2-7-2-同步方法" class="headerlink" title="2.7.2 同步方法"></a>2.7.2 同步方法</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">(String namer)</span>&#123;<br>....<br>&#125;<br></code></pre></td></tr></table></figure><p>代码示例：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">Ticket3</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span> &#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">tick</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-keyword">private</span> <span class="hljs-type">boolean</span> <span class="hljs-variable">isFlag</span> <span class="hljs-operator">=</span> <span class="hljs-literal">true</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span> (isFlag) &#123;<br>            show();<br><br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">synchronized</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">show</span><span class="hljs-params">()</span> &#123;<span class="hljs-comment">//同步show方法，继承Thread类方法一样，只需同步方法即可，同时需要给方法加static关键字，确保不会创建多个对象</span><br>        <span class="hljs-keyword">if</span> (tick &gt; <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">100</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;号窗口买票，票号为：&quot;</span> + tick--);<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            isFlag = <span class="hljs-literal">false</span>;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">TicketTest3</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Ticket3</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Ticket3</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">thread3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(ticket);<br><br>        thread1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        thread2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        thread3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        thread1.start();<br>        thread2.start();<br>        thread3.start();<br><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h5 id="2-7-3-Lock锁"><a href="#2-7-3-Lock锁" class="headerlink" title="2.7.3  Lock锁"></a>2.7.3  Lock锁</h5><ul><li><p>从JDK 5.0开始，Java提供了更强大的线程同步机制–通过显式定义同步锁对象来实现同步。同步锁使用Lock对象充当。</p></li><li><p>java.util.concurrent.locks.Lock接口是控制多个线程对共享资源进行访问的工具。锁提供了对共享资源的独占访问，每次只能有一个线程对Lock对象加锁，线程开始访问共享资源之前应先获得Lock对象。</p></li><li><p>ReentrantLock类实现了Lock，它拥有与 synchronized相同的并发性和内存语义，在实现线程安全的控制中，比较常用的是 Reentrantlock，可以显式加锁、释放锁。</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">A</span> &#123;<br>    <span class="hljs-comment">//1.实例化ReentrantLock对象</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-type">ReenTrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReenTrantLook</span>();<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">m</span> <span class="hljs-params">()</span>&#123;<br>        lock.lock<span class="hljs-comment">//2.先加锁</span><br>        <span class="hljs-keyword">try</span>&#123;<br>            <span class="hljs-comment">//保证线程同步的代码</span><br>        &#125;<span class="hljs-keyword">finally</span>&#123;<br>            lock.unlock();<span class="hljs-comment">//3.后解锁</span><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//注意：如果同步代码块有异常，要将unlock()写入finally语句块中</span><br></code></pre></td></tr></table></figure><p>代码示例</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-keyword">class</span> <span class="hljs-title class_">Window</span> <span class="hljs-keyword">implements</span> <span class="hljs-title class_">Runnable</span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">int</span> <span class="hljs-variable">ticket</span> <span class="hljs-operator">=</span> <span class="hljs-number">100</span>;<br>    <span class="hljs-comment">//1.实例化ReentrantLock</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-type">ReentrantLock</span> <span class="hljs-variable">lock</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">ReentrantLock</span>();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">run</span><span class="hljs-params">()</span> &#123;<br>        <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>)&#123;<br>            <span class="hljs-keyword">try</span>&#123;<br><br>                <span class="hljs-comment">//2.调用锁定方法lock()</span><br>                lock.lock();<br><br>                <span class="hljs-keyword">if</span>(ticket &gt; <span class="hljs-number">0</span>)&#123;<br><br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">100</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br><br>                    System.out.println(Thread.currentThread().getName() + <span class="hljs-string">&quot;：售票，票号为：&quot;</span> + ticket);<br>                    ticket--;<br>                &#125;<span class="hljs-keyword">else</span>&#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>            &#125;<span class="hljs-keyword">finally</span> &#123;<br>                <span class="hljs-comment">//3.调用解锁方法：unlock()</span><br>                lock.unlock();<br>            &#125;<br><br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">class</span> <span class="hljs-title class_">LockTest</span> &#123;<br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span><span class="hljs-params">(String[] args)</span> &#123;<br>        <span class="hljs-type">Window</span> <span class="hljs-variable">w</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Window</span>();<br><br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t1</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t2</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br>        <span class="hljs-type">Thread</span> <span class="hljs-variable">t3</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Thread</span>(w);<br><br>        t1.setName(<span class="hljs-string">&quot;窗口1&quot;</span>);<br>        t2.setName(<span class="hljs-string">&quot;窗口2&quot;</span>);<br>        t3.setName(<span class="hljs-string">&quot;窗口3&quot;</span>);<br><br>        t1.start();<br>        t2.start();<br>        t3.start();<br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/JavaSE/"/>
    <url>/2023/11/17/JavaSE/</url>
    
    <content type="html"><![CDATA[<h3 id="Java-Stream流"><a href="#Java-Stream流" class="headerlink" title="Java Stream流"></a>Java Stream流</h3><h4 id="生成流"><a href="#生成流" class="headerlink" title="生成流"></a>生成流</h4><p>在 Java 8 中, 集合接口有两个方法来生成流：</p><ul><li><strong>stream()</strong> − 为集合创建串行流。</li><li><strong>parallelStream()</strong> − 为集合创建并行流。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br>List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());<br></code></pre></td></tr></table></figure><hr><h4 id="forEach"><a href="#forEach" class="headerlink" title="forEach"></a>forEach</h4><p>Stream 提供了新的方法 ‘forEach’ 来迭代流中的每个数据。以下代码片段使用 forEach 输出了10个随机数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>random.ints().limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure><hr><h4 id="map"><a href="#map" class="headerlink" title="map"></a>map</h4><p>map 方法用于映射每个元素到对应的结果，以下代码片段使用 map 输出了元素对应的平方数：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;Integer&gt; numbers = Arrays.asList(<span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>);<br><span class="hljs-comment">// 获取对应的平方数</span><br>List&lt;Integer&gt; squaresList = numbers.stream().map( i -&gt; i*i).distinct().collect(Collectors.toList());<br></code></pre></td></tr></table></figure><hr><h4 id="filter"><a href="#filter" class="headerlink" title="filter"></a>filter</h4><p>filter 方法用于通过设置的条件过滤出元素。以下代码片段使用 filter 方法过滤出空字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 获取空字符串的数量</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> strings.stream().filter(string -&gt; string.isEmpty()).count();<br></code></pre></td></tr></table></figure><hr><h4 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h4><p>limit 方法用于获取指定数量的流。 以下代码片段使用 limit 方法打印出 10 条数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>random.ints().limit(<span class="hljs-number">10</span>).forEach(System.out::println);<br></code></pre></td></tr></table></figure><hr><h4 id="sorted"><a href="#sorted" class="headerlink" title="sorted"></a>sorted</h4><p>sorted 方法用于对流进行排序。以下代码片段使用 sorted 方法对输出的 10 个随机数进行排序：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Random</span> <span class="hljs-variable">random</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Random</span>();<br>random.ints().limit(<span class="hljs-number">10</span>).sorted().forEach(System.out::println);<br></code></pre></td></tr></table></figure><hr><h4 id="并行（parallel）程序"><a href="#并行（parallel）程序" class="headerlink" title="并行（parallel）程序"></a>并行（parallel）程序</h4><p>parallelStream 是流并行处理程序的代替方法。以下实例我们使用 parallelStream 来输出空字符串的数量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt; strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br><span class="hljs-comment">// 获取空字符串的数量</span><br><span class="hljs-type">long</span> <span class="hljs-variable">count</span> <span class="hljs-operator">=</span> strings.parallelStream().filter(string -&gt; string.isEmpty()).count();<br></code></pre></td></tr></table></figure><p>我们可以很容易的在顺序运行和并行之间切换。</p><hr><h4 id="Collectors"><a href="#Collectors" class="headerlink" title="Collectors"></a>Collectors</h4><p>Collectors 类实现了很多归约操作，例如将流转换成集合和聚合元素。Collectors 可用于返回列表或字符串：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs java">List&lt;String&gt;strings = Arrays.asList(<span class="hljs-string">&quot;abc&quot;</span>, <span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;bc&quot;</span>, <span class="hljs-string">&quot;efg&quot;</span>, <span class="hljs-string">&quot;abcd&quot;</span>,<span class="hljs-string">&quot;&quot;</span>, <span class="hljs-string">&quot;jkl&quot;</span>);<br>List&lt;String&gt; filtered = strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.toList());<br> <br>System.out.println(<span class="hljs-string">&quot;筛选列表: &quot;</span> + filtered);<br><span class="hljs-type">String</span> <span class="hljs-variable">mergedString</span> <span class="hljs-operator">=</span> strings.stream().filter(string -&gt; !string.isEmpty()).collect(Collectors.joining(<span class="hljs-string">&quot;, &quot;</span>));<br>System.out.println(<span class="hljs-string">&quot;合并字符串: &quot;</span> + mergedString);<br></code></pre></td></tr></table></figure><hr><h4 id="统计"><a href="#统计" class="headerlink" title="统计"></a>统计</h4><p>另外，一些产生统计结果的收集器也非常有用。它们主要用于int、double、long等基本类型上，它们可以用来产生类似如下的统计结果。</p><pre><code class="java">List&lt;Integer&gt; numbers = Arrays.asList(3, 2, 2, 3, 7, 3, 5); IntSummaryStatistics stats = numbers.stream().mapToInt((x) -&gt; x).summaryStatistics(); System.out.println(&quot;列表中最大的数 : &quot; + stats.getMax());System.out.println(&quot;列表中最小的数 : &quot; + stats.getMin());System.out.println(&quot;所有数之和 : &quot; + stats.getSum());System.out.println(&quot;平均数 : &quot; + stats.getAverage());</code></pre>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/Design%20Pattern/"/>
    <url>/2023/11/17/Design%20Pattern/</url>
    
    <content type="html"><![CDATA[<h3 id="23种设计模式"><a href="#23种设计模式" class="headerlink" title="23种设计模式"></a>23种设计模式</h3><ul><li>创建者模式：单例，原型，工厂方法，抽象工厂，建造者</li><li>结构型模式：代理，适配器，桥接，装饰，外观，享元，组合</li><li>行为型模式：模板方法，策略，命令，职责链，状态， 观察者，中介者，迭代器，访问者，备忘录，解释器</li></ul><h3 id="UML"><a href="#UML" class="headerlink" title="UML"></a>UML</h3><p>用例图，类图，对象图，状态图，活动图，时序图，协作图，构件图，部署图</p><h3 id="类与类之间的关系"><a href="#类与类之间的关系" class="headerlink" title="类与类之间的关系"></a>类与类之间的关系</h3><p>包括关联关系，聚合关系，组合关系，依赖关系，继承关系，实现关系</p><ul><li>关联关系：<ul><li>单向关系：customer—-&gt;address</li><li>双向关系：customer&lt;—-&gt;product</li><li>自关联：node</li></ul></li><li>聚合关系：整体与部分，强关联关系，teacher—-&gt;university</li><li>组合关系：更强烈的聚合关系，head—-&gt;mouth</li><li>依赖关系：耦合度最低的管理关系，diver—-&gt;car</li><li>继承关系：耦合度最大的关系，student，teacher—-&gt;person</li><li>实现关系：接口与实现类之间的关系，car，ship—-&gt;vehicle(interface)</li></ul><h3 id="抽象类和接口的区别"><a href="#抽象类和接口的区别" class="headerlink" title="抽象类和接口的区别"></a>抽象类和接口的区别</h3><ul><li>抽象类中的方法可以有<strong>方法体</strong>，就是能实现方法的具体功能，但是接口中的方法不行。</li><li>抽象类中的<strong>成员变量</strong>可以是各种类型的，而接口中的成员变量只能是 <strong>public static final</strong> 类型的。</li><li>接口中不能含有<strong>静态代码块</strong>以及<strong>静态方法</strong>(用 static 修饰的方法)，而抽象类是可以有静态代码块和静态方法。</li><li>一个类只能继承一个抽象类，而一个类却可以实现多个接口。</li></ul><h3 id="软件设计原则："><a href="#软件设计原则：" class="headerlink" title="软件设计原则："></a>软件设计原则：</h3><p>开闭原则，里氏代换原则，依赖倒转原则，接口隔离原则，迪米特原则，合成复合原则</p><ul><li>开闭原则：<strong>对扩展开放，对修改关闭</strong>，抽象类和接口，搜狗输入法与皮肤</li><li>里氏代换原则：子类继承父类时，除添加新的方法完成新增功能外，尽量<strong>不要重写父类的方法</strong>，长方形和正方形</li><li>依赖倒转原则：对<strong>抽象</strong>进行编程，不要对实现进行编程，电脑内存cpu硬盘</li><li>接口隔离原则：一个类对另一个类的依赖应该建立在<strong>最小接口</strong>上，安全门</li><li>迪米特法则：两个软件实体无须直接通信，那么就不应当发生直接的相互调用，可以通过<strong>第三方转发</strong>该调用，明星经纪人</li><li>合成复用原则：尽量先使用组合或者聚合等关联关系来实现，其次才考虑使用继承关系来实现，汽车分类管理</li></ul><h3 id="创建者模式"><a href="#创建者模式" class="headerlink" title="创建者模式"></a>创建者模式</h3><p>包括单例模式，工厂方法模式，抽象工程模式，原型模式，建造者模式</p><h3 id="利用配置文件创造类"><a href="#利用配置文件创造类" class="headerlink" title="利用配置文件创造类"></a>利用配置文件创造类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs java"><span class="hljs-type">Properties</span> <span class="hljs-variable">p</span> <span class="hljs-operator">=</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Properties</span>();<br><span class="hljs-type">InputStream</span> <span class="hljs-variable">is</span> <span class="hljs-operator">=</span> CoffeeFactory.class.getClassLoader.getResourceAsStream(<span class="hljs-string">&quot;bean.properties&quot;</span>);<br><span class="hljs-keyword">try</span> &#123;<br>    p.load(is);<br>    Set&lt;Object&gt; keys = p.keySet();<br>    <span class="hljs-keyword">for</span> (Object key : keys) &#123;<br>        <span class="hljs-type">String</span> <span class="hljs-variable">className</span> <span class="hljs-operator">=</span> p.getProperty((String) key);<br>        <span class="hljs-type">Class</span> <span class="hljs-variable">clazz</span> <span class="hljs-operator">=</span> Class.forName(className);<br>        <span class="hljs-type">Coffee</span> <span class="hljs-variable">coffee</span> <span class="hljs-operator">=</span> (Coffee) clazz.newInstance();<br>        map.put((String)key, coffee);<br>    &#125;<br>&#125; <span class="hljs-keyword">catch</span> (Exception e)&#123;<br>    e.printStackTrace();<br>&#125;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title></title>
    <link href="/2023/11/17/AI%20Note/"/>
    <url>/2023/11/17/AI%20Note/</url>
    
    <content type="html"><![CDATA[<p>![[Pasted image 20231116194435.png]]</p><p>![[Pasted image 20231116194500.png]]</p><p>![[Pasted image 20231116220915.png]]</p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
